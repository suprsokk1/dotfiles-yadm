# -*- mode: sh[bash] -*-

TRAPERR() {
    case $# in
        0) exit 1;; # !?
        *)
            case $@ in
                *)
                ;;
                *)
            esac
    esac
}


command_not_found_handle() {
    # test -f /etc/redhat-release
    case $1 in
        tmux)
            pushd $(mktemp -d)
            coproc nohup sudo dnf install --assumeyes tmux
            popd
            ;;
        regex2json)
            go install gitlab.com/tozd/regex2json/cmd/regex2json@main
            ;;
        exa|fswatch|gotty|highlight|tar|fzf|fd|mako|rg|pass)
            tmux neww sudo dnf install --assumeyes "$1"
            eval "$@"
            ;;
        yadm)
            brew install "$1"
            ;;
        *)
    esac

    eval "$@"

}


__get_logopt__tmux() {
    tmux capture-pane -p |
        sed -E '/[^[:space:]]/!d;s,.*~,,'
}


tidy() {
    command tr --delete '["]' |
        command tr --squeeze-repeats '[[:space:]]'
}


getPpid() {
    grep -Pioz '(?<=Ppid:).*' /proc/${1:-$$}/status |
        tr --delete '[[:space:]]'
}


TODO() {
    :
}

csv2json() {
    TODO
}

json2csv() {
    TODO
}

init2json() {
    TODO
}


set-theme---zsh() {
    command sed -E "/ZSH_THEME/d;iZSH_THEME=\"${@}\";N" ~/.zshrc
}


list--files--fd() {
    eval "command stdbuf -oL /usr/bin/env --ignore-environment $(command -v fd) $@"
}

list--unit-files() {
    command jc systemctl listt-unit-files |
        jq '.[]' -c
}

list--env() {
    {
        env
        set
    } | jc --env  |
        jq -c '.[]'
}

cache() {
    TODO
}

list--files--all() {
    list--files--fd --one-file-system -uuu `# -X exa -l` . "${@:-$PWD}"
}

list--files--git-repositories() {
    list--files--fd --hidden -tf --glob config "${@:-$PWD}" |
        LC_ALL=C command rg --line-buffered -- '.git/config' |
        sed -E 's#..git.config$##' |
        command jc --ls |
        command jq -c '.[]'
}

list--files() {
    list--files--fd |
        command jc --ls  |
        jq '.[]' -c
}

list--files--executable() {
    command fd --type f  -tx |
        command jc --ls  |
        jq '.[]' -c
}

list--files--changed-today() {
    list--files--fd --one-file-system --hidden --no-ignore-vcs --changed-within='1day' ${1:-.} "${2:-$PWD}"
}


#    translate ls arguments to exa
#    mainly '-t' => '--time modified'
# FIXME
unalias ls &>/dev/null ||:
ls() {
    local exa
    exa=(--icons --group-directories-first)
    for arg; do
        if  [[ $arg =~ ^-- ]]; then
            exa+=("$arg")
        elif [[ $arg =~ ^-[a-zA-Z] ]]; then
            # split short options
            grep --extended-regexp --only-matching -- '[[:alpha:]]' <<< "${arg//-/}" |
                while read c ; do
                    case $c in
                        o)
                            # TODO
                            ;;
                        t)
                            # exa+=( "${arg//t/}" )
                            exa+=( --time modified )
                            ;;
                        G|-)
                            # discard
                            ;;
                        *)
                            exa+=( -"$c" )
                    esac
                done
        else
            exa+=("$arg")
        fi
    done
    eval "exa ${exa[@]}"
}


__tmux_menu() {
    PS1=
    PS2=
    PS3=
    PS4=
    PS5=
    TRAPEXIT() { tmux set synchronize-panes 0; }
    TRAPINT() { exit; }
    0() { tput cup 0 0; }
    clr() {
        chars=()
    }
    chars=()
    cmd=()
    hist=()
    setopt pipefail
    tmux set synchronize-panes 1

    __get_logopt__tmux
    sleep 1

    # disable cursor
    tput civis

    while read -sk x
    do
        # terminate
        case $x in
            $'\025') ;;
            $'\ 025') ;;
            :) clear ;;
            .) cmd=() ;;
            *) chars+=("$x") ;;
        esac

        case $chars in
            :*) cmd+=("$x") ;;
            *)  chars+=("$x");;
        esac

        tput cup 0 0
        CLEAR_LINE='\033[1K'
        clr=clear_line

        case ${#cmd} in
            0)

            ;;
            *)
                printf '%s' "$cmd[@]"
        esac

        echo
        chars+=("$x")

    done

    tput cnorm

    exit
}

enumerate() {
    local i
    i=0
    # echo -en ' '
    case $# in
        0) return;;
        1)
            enumerate $(command grep -o . <<< "$1")
           ;;
        *)
            for arg; do
                printf '%2d %s\n' $((++i)) "$arg"
            done
    esac
}

vpn() {
    # TODO
    exit 0
    providers=(
        [piactl]="connect,disconnect"
        [tailscale]="up,down"
    )

    if test -f ~/.local/vpn; then
        read provider ~/.local/vpn
    else
        read -p "Select provider [${providers[*]}]" provider
    fi

    argument=${providers[$provider]}

    case "$1"  in
        default)
            for provider in ${providers[*]}; do
                tee ~/.local/vpn  <<< "$provider"
            done
            ;;
        up|on|1)
            eval "$provider ${argument%,*}"
            ;;
        down|off|0)
            eval "$provider ${argument#*,}"
            ;;
        *)

    esac
}

for ITEM in aliases functions parameters; do
    eval "list--$ITEM() { print -rl -- \${(k)$ITEM}; }"
done

when() {
    [[ $@ ]] || return 1
    exe="$1"
    if command -v "$exe" &>/dev/null
    then eval "$@"
    fi
}

__debug__() {
    set -x
    eval "$@"
    set +x
}

precmd() {
    eval "${PROMPT_COMMAND:+$PROMPT_COMMAND}"
}

__tmux_mpm_helper() {
    set $(tmux capture-pane -p | awk '/cargo|dnf|gem|yum/{print $2}')
    export dnf=("$@")
}

_files_tmux() {
    # (notify-send --expire-time 500 "$0" "$words" &>/dev/null)
    reply=( $(_capp | awk /'\.([ot]tf)$'/{print\ \$1}) )
    fonts=( $(_capp | awk /'\.([ot]tf)$'/{print\ \$1}) )
    files=( $(_capp | grep -Poz -- '/[\s\S]+/' | awk '{print $1}' ))

}

_refresh_arrays() {
    [[ $TMUX ]] || return 0
    _files_tmux
    # (notify-send --expire-time 500 "$0" "$words" &>/dev/null)
    :
}

list() {
    :
}

_list() {
    list--functions
}

_subnets() {
    command ip -4 route |
        command grep -Po -- "$(rgxg cidr 0.0.0.0/0)/([1-3]?[0-9])"
}

_ip_addresses() {
    command ip -4 address show |
        command grep -Po -- "\b$(rgxg cidr 0.0.0.0/0)\b"
}
