# -*- mode: sh -*-
precmd() {
    eval "${PROMPT_COMMAND:+$PROMPT_COMMAND}"
}

command_not_found_handle() {
    command_not_found_handle() {
        print -ln "Custom: 'Command not found': ${@//$'\n'/\;}" >2
        return 127
    }
    # test -f /etc/redhat-release
    exe="$1"
    basename=${1##*/}

    case $basename in
        tmux)
            pushd $(mktemp -d) || exit
            coproc nohup sudo dnf install --assumeyes tmux
            popd || exit
            ;;
        pup)
            # latest=(
            #     ['pup']='v0.4.0'
            # )
            # FIXME @latest TODO find latest stable version
            # go install github.com/ericchiang/pup@$latest['pup']
            go install github.com/ericchiang/pup@main
            ;;
        regex2json)
            go install gitlab.com/tozd/regex2json/cmd/regex2json@main
            ;;
        exa|fswatch|gotty|highlight|tar|fzf|fd|mako|rg|pass|lynis)
            tmux split -d sudo dnf install --assumeyes "$1"
            eval "$@"
            ;;
        yadm)
            brew install "$1"
            ;;
        *)
    esac

    eval "$@"

}


TRAPERR() {
    case $@ in
        *)
            return 0
    esac
}

# TRAPERR() {
#     return
#     case $# in
#         0) exit 1;; # !?
#         *)
#             case $@ in
#                 .check*)
#                 ;;
#                 *)
#             esac
#     esac
#     # echo  -e ${FUNCNAME:+-n} "${FUNCNAME:+$FUNCNAME}"
# }

__get_longopt__tmux() {
    tmux capture-pane -p |
        sed -E '/[^[:space:]]/!d;s,.*~,,'
}


tidy() {
    command tr --delete '["]' |
        command tr --squeeze-repeats '[[:space:]]'
}

getPpid() {
    grep -Pioz '(?<=Ppid:).*' /proc/"${1:-$$}"/status |
        tr --delete '[[:space:]]'
}

set-theme---zsh() {
    command sed -E "/ZSH_THEME/d;iZSH_THEME=\"${@}\";N" ~/.zshrc
}

DEPRICATED-list--files--fd() {
    eval "command stdbuf -oL /usr/bin/env --ignore-environment $(command -v fd) $@"
}

DEPRICATED-list--unit-files() {
    command jc systemctl listt-unit-files |
        jq '.[]' -c
}

DEPRICATED-list--env() {
    { env; set; } | LC_ALL jc --env  | jq -c '.[]'
}

DEPRICATED-list--files--fd() {
    :
}

DEPRICATED-list--files--all() {
    DEPRICATED-list--files--fd --one-file-system -uuu `# -X exa -l` . "${@:-$PWD}"
}

DEPRICATED-list--files--git-repositories() {
    DEPRICATED-list--files--fd --hidden -tf --glob config "${@:-$PWD}" |
        LC_ALL=C command rg --line-buffered -- '.git/config' |
        sed -E 's#..git.config$##' |
        command jc --ls |
        command jq -c '.[]'
}

DEPRICATED-list--files.json() {
    DEPRICATED-list--files--fd | command jc --ls  | jq '.[]' -c
}

DEPRICATED-list--files--executable() {
    command fd --type f  -tx |
        command jc --ls  |
        jq '.[]' -c
}

DEPRICATED-list--files--changed-today() {
    DEPRICATED-list--files--fd --one-file-system --hidden --no-ignore-vcs --changed-within='1day' "${1:-.}" "${2:-$PWD}"
}

DEPRICATED-list--yadm-files() {
    yadm list
}

DEPRICATED-regex--files-at-level.3() {
    grep -Po -- '^/?(?:[^/]+\b){3}'
}

DEPRICATED-list--yadm-files--untagged() {
    yadm list | sed '/#/d'
}

DEPRICATED-dirnames() {
    command xargs --replace=FILES find FILES -maxdepth 0 -execdir pwd \;
}

DEPRICATED-dirnames--uniq() {
    -dirnames | uniq
}

#    translate ls arguments to exa
#    mainly '-t' => '--time modified'
# FIXME
unalias ls &>/dev/null ||:
ls() {
    args=( ${exa[*]} )
    local exa
    exa=( --icons --group-directories-first )
    exa+=( $args )
    for arg; do
        if  [[ $arg =~ ^-- ]]; then
            # longopts
            exa+=("$arg")
        elif [[ $arg =~ ^-[a-zA-Z] ]]; then
            # shortopts
            for c in `# split short options` $(grep --extended-regexp --only-matching -- '[[:alpha:]]' <<< "${arg//-/}"); do
                case $c in
                    [aA]) exa+=( --all ) ;;
                    o)    `#TODO`;;
                    t)    exa+=( --time modified );;
                    G|-)  `# discard` ;;
                    *)    exa+=( -"$c" )
                esac
            done
        else
            exa+=( "$arg" )
        fi
    done
    eval "exa ${exa[*]}"
}


enumerate() {
    local i
    i=0
    # echo -en ' '
    case $# in
        0) return;;
        1)
            enumerate "$(command grep -o . <<< \"$1\")"
            ;;
        *)
            for arg; do
                printf '%2d %s\n' $((++i)) "$arg"
            done
    esac
}

when() {
    [[ $@ ]] || return 1
    exe="$1"
    if command -v "$exe" &>/dev/null
    then eval "$@"
    fi
}

__debug__() {
    set -x
    eval "$@"
    set +x
}

__tmux_mpm_helper() {
    set $(tmux capture-pane -p | awk '/cargo|dnf|gem|yum/{print $2}')
    export dnf=( "$@" )
}

_files_tmux() {
    # (notify-send --expire-time 500 "$0" "$words" &>/dev/null)
    reply=( $(_capp | awk /'\.([ot]tf)$'/{print\ \$1}) )
    fonts=( $(_capp | awk /'\.([ot]tf)$'/{print\ \$1}) )
    files=( $(_capp | grep -Poz -- '/[\s\S]+/' | awk '{print $1}' ))

}

_refresh_arrays() {
    [[ $TMUX ]] || return 0
    _files_tmux
    return
    notify-send --expire-time 500 "$0" "$words" &>/dev/null
}

DEPRICATED-match--ip-addresses() {
    command grep -Po -- "\b$(rgxg cidr 0.0.0.0/0)\b"
}

DEPRICATED-subnets() {
    command ip -4 route |
        command grep -Po -- "$(rgxg cidr 0.0.0.0/0)/([1-3]?[0-9])"
}

DEPRICATED-ip-addresses() {
    command ip -4 address show |
        command grep -Po -- "\b$(rgxg cidr 0.0.0.0/0)\b"
}

.check--() {
    TODO
}

DEPRICATED-download-nerd-fonts() {
    curl --silent -- nerdfonts.com/downloads |
        pup 'a[href*="zip"]:contains("Download")' attr{href} |
        xargs env -C /dev/shm curl --retry 2 --verbose --remote-name --progress-bar
}

DEPRICATED-list--sway-windows_workspace() {
    TODO
}

DEPRICATED-list--sway-windows_all() {
    TODO
}

DEPRICATED-list--github-starred-repositories() {
    TODO
}

list() {
    :
}

_list() {
    DEPRICATED-list--functions |
        DEPRICATEDcommand env - LC_ALL=C rg --line-buffered -- -list--
}

vpn() {
    case $1 in
        pause|hold|sleep)
            piactl
            ;;
        1|y|on|up)
            piactl connect
            ;;
        0|n|off|down)
            piactl disconnect
            ;;
        *)
    esac
}


# _run_hooks() {
#     # tmux display-popup
#     case $funcstack in
#         precmd*)

#             ;;
#         *)

#     esac
#     case $words[1] in
#         cd)
#                 ;;
#         *)

#     esac

#     case $words in
#         (ssh|http)*.(github|gitlab)*.com*)
#             tmux display-popup
#             ;;
#         https*)

#             ;;
#         *)
#     esac
# }

TODO() {
    [[ $TMUX ]] && tmux display-message "${funcstack//TODO/}"
}

_run_hooks() {
    :
}

fd() {
    # TODO
    eval "$@"
    return
    # set -x
    files=()
    opts=()
    for var;do
        if test -f "$var" || test -d "$var" || test -L "$var"; then
            files+=( "$var" )
        else
            opts+=( "$var" )
        fi
    done

    case ${#files} in
        1)
            if [[ -d $1 ]]; then
                eval "command fd $opts -- . $files"
            else
                eval "command fd $opts -- $files"
            fi
            ;;
        *)
            eval "$@"
    esac
}

DEPRICATED-get-workspace() {
    swaymsg -t get_tree |
        command jq 'recurse(.nodes[]) | select(.nodes[].focused == true)'
}

unset -f fd # FIXME

kbd() {
    # Work in progress
    sed -E 's#C-(.)[[:space:]]*#^\U\1#g;s#M-#^[#g' <<< "$@"
}

cpus() {
    pushd /sys/class/cpuid &>/dev/null
    set *; echo $#
    popd &>/dev/null
}
