# .zshrc -*- mode: sh -*-
prompt_command+=( _yadm_load_config )

# zmodload zsh/regex
zmodload zsh/pcre

case $(xdg-settings get default-web-browser) in
  *qute*);;
  *) xdg-settings set default-web-browser /usr/share/applications/org.qutebrowser.qutebrowser.desktop
esac

# force tmux to truncate lines
# setterm --linewrap off

ZSH=~/.oh-my-zsh
ZSH_THEME=${ZSH_THEME:-simple}

FZF_DEFAULT_OPTS="--layout=reverse --height=7"
FZF_DEFAULT_COMMAND=$HOME/bin/,

if [[ $TMUX ]]; then plugins+=( git ); fi
# plugins-=( pipenv )

hash -d yadm=$HOME/.config/yadm
hash -d run="${XDG_RUNTIME_DIR:-/run/user/${EUID:-$(id -u)}}"
hash -d config="${XDG_CONFIG_HOME:-$HOME/.config}"
hash -d fonts=$HOME/.local/share/fonts
hash -d autorun=$HOME/.config/autorun
hash -d desktop=$HOME/.local/share/applications
hash -d apps=$HOME/.local/share/applications
hash -d zsh=$ZSH

# plugins+=(h) # breaks zsh-autosuggestions?

prompt_command=()
prompt_command+=( '_tmux_prompt_helper' )
prompt_command+=( '. ~/.functions' )
prompt_command+=( '. ~/.aliases' )

PROMPT_COMMAND=
for x in $prompt_command; do
  PROMPT_COMMAND+="; $x"
done

if ! test -d ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
then git clone https://github.com/zsh-users/zsh-autosuggestions $_
fi

for ITEM in aliases functions parameters; do
  function -list--$ITEM {
    eval "print -rl -- \${(k)${funcstack##*-}}"
  }
done

# activate oh-my-zsh
if [[ -s $ZSH/oh-my-zsh.sh ]]; then . $ZSH/oh-my-zsh.sh; fi

# detect tmux popup window
if [[ $TMUX ]]; then
if [[ $TMUX_PANE ]]; then
## normal pane
# when active tmux will display
PROMPT="${PROMPT//git_prompt_info/true}"
PS1='âž¤ '
else

  ## popup
  test -d ~yadm &>/dev/null && cd "$_"
  set GIT_WORK_TREE=$HOME GIT_DIR=$HOME/.local/share/yadm/repo.git
  env $@ exa -l --icons --group-directories-first --time modified --git
  set -
fi
fi

if command -v crontab &>/dev/null; then : <<.syntax; { envsubst | crontab - &>/dev/null; } <<'CRONTAB'
# M H w m Y
  * * * * * commandline
.syntax
PATH=${HOME}/bin:${PATH}
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/${EUID}/bus
WAYLAND_DISPLAY=${WAYLAND_DISPLAY}

*/5 * * * *
CRONTAB
fi

:<<.syntax; if command -v incrontab &>/dev/null; then { envsubst|incrontab - &>/dev/null; } <<'INCRONTAB'; fi
$$   dollar sign
$@   watched filesystem path (see above)
$#   event-related file name
$%   event flags (textually)
$&   event flags (numerically)
.syntax
WAYLAND_DISPLAY=${WAYLAND_DISPLAY}
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/${EUID}/bus

$HOME/watch               IN_CREATE,recursive=false /usr/bin/env DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/${EUID}/bus WAYLAND_DISPLAY=${WAYLAND_DISPLAY} /usr/bin/notify-send --expire-time 1000 foo bar
$HOME/.tmux.conf##default IN_CLOSE_WRITE,recursive=false /usr/bin/notify-send --expire-time 1000 foo bar
INCRONTAB
# $HOME/watch               IN_CREATE,recursive=false /usr/bin/env DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/${EUID}/bus WAYLAND_DISPLAY=${WAYLAND_DISPLAY} /usr/bin/notify-send --expire-time 1000 foo bar

# incrontab -l | awk '{system("chmod a+x "$1)}'

# ~/watch IN_ALL_EVENTS,recursive=false /usr/bin/notify-send --expire-time 1000 foo bar
# DEBUG=1
# PATH=${HOME}/bin:${PATH}
# DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/${EUID}/bus
# WAYLAND_DISPLAY=${WAYLAND_DISPLAY}
# ${HOME}/.local/share/fonts/   IN_ALL_EVENTS,recursive=false    , $%,"$@/$#"
# ${HOME}/Downloads/            IN_ALL_EVENTS,recursive=false    , $%,"$@/$#"
# ${HOME}/git/org/roam/         IN_CREATE,recursive=false        env -C ${HOME}/git/org gh repo sync
# ${HOME}/watch/                IN_ALL_EVENTS,recursive=false    /usr/bin/notify-send --expire-time 5000 $# $%

if false; then
source <(when jc --zsh-comp)
fi

#
## completion
##
## DOC: https://thevaluable.dev/zsh-completion-guide-examples/

function _vpn {
  reply=( on off up down 0 1 )
}
compctl -K {_,}vpn

compctl -K _git yadm

:<<COMPLETION_EXAMPLES
$ zstyle :completion:<function>:<completer>:<command>:<argument>:<tag>
COMPLETION_EXAMPLES

zsh_cache_dir="${XDG_CACHE_HOME:-/run/user/${EUID:-$(id -u)}}/zsh/.zcompcache"
zstyle ':completion:*' cache-path "$zsh_cache_dir"
zstyle ':completion:*' use-cache on
zstyle ':completion:*' squeeze-slashes true

# select | select=long | select=<n>
zstyle ':completion:*' menu select
zstyle ':completion:*:*:*:*:corrections' format '%F{yellow}!- %d (errors: %e) -!%f'

zstyle ':completion:*' completer _extensions _complete _approximate
zstyle ':completion:*:*:cp:*' completer _extensions _complete _approximate
zstyle ':completion:*:*:vpn:*' completer _vpn
zstyle ':completion:*:*:wifi:*' completer _complete
zstyle ':completion:*:*:yadm:*' completer _git

# . $ZSH/oh-my-zsh.sh

# this must be the last file to load
set - zsh-syntax-highlighting
if [[ -s ~/src/"$1"/"$1".zsh ]]; then
source ~/src/"$1"/"$1".zsh
fi; shift


#
## Emacs default 'M-l'
##

bindkey "^[l" down-case-word

#
## Insert last commands output
## https://github.com/rothgar/mastering-zsh/blob/master/docs/helpers/widgets.md
##
zmodload -i zsh/parameter

function insert-last-command-output {
  LBUFFER+="$(eval $history[$((HISTCMD-1))])"
}
zle -N insert-last-command-output
bindkey "^Q^L" insert-last-command-output


#
## TODO replace word at point
##

function fzf-replace-word {
  fzf --preview "echo $words[-1]"
}
zle -N fzf-replace-word


#
## Clipboard
##

function paste-clipboard {
  LBUFFER+=$(if [[ $WAYLAND_DISPLAY ]]; then wl-paste ; else xclip -out -selection clipboard; fi)
}
zle -N paste-clipboard

function pipe-to-emacs {
  :
}

function fzf-buffer {
  tmux display-popup -E -B -e "FZF_DEFAULT_COMMAND=tmux paste-buffer -p"
}
zle -N fzf-buffer
bindkey "^[^[" fzf-buffer

# if [[ $WAYLAND_DISPLAY ]]; then
# bindkey "^[y" paste-clipboard-wayland
# else
# bindkey "^[y" paste-clipboard-x
# fi

bindkey "^[y" paste-clipboard

# FIXME show relevant git info.; branch, dirty status etc

#
## FIXME Pretty print JSON
##

function pretty-print-json {
  LBUFFER="$(eval jq <<< \"$json\")"
}
zle -N pretty-print-json
bindkey "^Q^J" pretty-print-json

function foo {
  case ${#LBUFFER} in
    0) tmux display-message "Nothing to do.." ;;
    *) tmux split -H "cat"
  esac
}
zle -N foo

bindkey "^[i" foo


#
## FIXME In case homebrew break Python deps
##

if false; then
old_path="$PATH"
path=( ${(m)path:#*brew*} )
export PATH
fi

if test -d ~/.sh.d; then
for adhoc in ~/.sh.d/*.zsh; do
  shellcheck "$adhoc" &>/dev/null || continue
  . "$adhoc"
done
fi


#
## ls / exa
##

function yadm_regex {
  yadm config --get-regex ^regex |
    cut -d. -f 2- |
    sed -E 's#^([[:print:]]+)[[:space:]](.*)#(?P<\1>\2)#' |
    tr -d '\n' |
    xargs -0 |
    tr '\0' '|'
}

function _notify_send {
  notify-send --expire-time 300 "${@:-${BUFFER:-}}"
}

function _hook__self-insert__tmux {
  tmux set @shell-buffer "$BUFFER"
}

function on-change-hook {
  tmux set @shell-buffer "$BUFFER"
  # _hook__self-insert__tmux
  case ${#LBUFFER} in
    [3-9])
    ;;
    *)
  esac
  # _notify_send 'self-insert' "$BUFFER"
  # RBUFFER+="."
  # execute some other command, but ensure they don't produce any output.
}

function self-insert {
  on-change-hook
  zle .self-insert
}

function backward-delete-char {
  on-change-hook
  zle .backward-delete-char
}

function backward-delete-word {
  on-change-hook
  zle .backward-delete-word
}

zle -N self-insert
zle -N backward-delete-char
zle -N backward-delete-word

function _tmux_prompt_helper {
  rc=$?
  tmux set @rc $rc
  set colour{10,9}
  ((rc)) && shift # true on error
  tmux set @color $1
  tmux set @color $1
}
