#!/usr/bin/env python3
import os
import json
import re
from subprocess import run, Popen, PIPE, DEVNULL
from pathlib import Path

rc = 0

def main():
    def _dump(path):
        with open(os.path.expanduser(path), "rb") as fd:
            return fd.read()

    def _update(*paths):
        for path in paths:
            data.update(parse(_dump(interpolate_path(path))))

    data = parse(_dump(os.environ['HOME'] + "/.config/yadm/config"))
    paths = data.get('include', {}).get('path', {})
    if type(paths) is str:
        _update(paths)
    else:
        _update(*paths)

    print(json.dumps(data))


def interpolate_path(path):
    backtick = '''`'''
    if not backtick in path:
        return path
    begginning, cmd, end = path.split(backtick)
    res = (
        run(cmd.split(), capture_output=True)
        .stdout
        .decode()
        .strip()
    )

    new_path = ''.join([begginning, res, end])
    Path(new_path).parent.mkdir(parents=True, exist_ok=True)
    Path(new_path).touch()

    return new_path


def num(func):
    def _num(*args, **kwargs):
        ret = func(*args, **kwargs)
        if type(ret) is str:
            try:
                return float(ret) if '.' in ret else int(ret)
            except Exception:
                return ret
        else:
            return ret
    return _num

import logging
import logging.handlers

log = logging.getLogger('MyLogger')
log.setLevel(logging.DEBUG)
handler = logging.handlers.SysLogHandler(address = '/dev/log')
log.addHandler(handler)
log.debug('this is debug')
log.critical('this is critical')


def parse(raw):
    regexp = re.compile(r'^[^[:print:]]*')
    # re.compile(r'\/{4}')        # TODO unescape regexp pattern

    raw_string = raw.decode()
    lines = raw_string.splitlines()
    section_heads = [_ for _ in lines if _.startswith('[')]
    res = dict()
    while section_heads:
        head = section_heads.pop()
        i = lines.index(head)
        clean_list = list(tuple(regexp.sub('', line).split(' = ')) for line in lines[i+1:-1])

        @num
        def _func(uniq_key):
            items = [val for key, val in clean_list if key == uniq_key]
            return items if len(items) > 1 else items.pop()

        res.update({head[1:-1]:{
            uniq_key:_func(uniq_key)
            for uniq_key in {x[0]  for x in clean_list}
        }})

        def _foo(k, v):
            del res[k]
            return k.split(' ')[0], (k.split("\"")[1], v)

        temp = dict(res) # copy res

        res.update(
            _foo(k, v)
            for k, v in temp.items()
            if ' ' in k
        )

        del lines[i:-1]

    return res


if __name__ == '__main__':
    try:
        main()
    except Exception:
        raise
        rc = 1

    # exit(rc)
