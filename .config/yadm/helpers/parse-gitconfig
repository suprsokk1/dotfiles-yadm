#!/usr/bin/env python3
import os
import json
import re
from subprocess import run, Popen, PIPE, DEVNULL
from pathlib import Path
import logging
import logging.handlers
from collections import defaultdict



def main():
    def _dump(path):
        with open(os.path.expanduser(path), "rb") as fd:
            return fd.read()

    def _update(*paths):
        for path in paths:
            data.update(parse(_dump(interpolate_path(path))))

    data = parse(_dump(os.environ['HOME'] + "/.config/yadm/config"))
    paths = data.get('include', {}).get('path', [])
    if type(paths) is str:
        _update(paths)
    else:
        _update(*paths)

    # TODO detect parent
    print(json.dumps(data))


def parse(raw, **kwargs):
    data = dict()
    key = None

    for line in raw.decode().splitlines():
        if '#' in line.split('=')[0]:
            continue

        if line.startswith('['):
            key = line.strip('[]"').split(' "')
            key = '.'.join(key)
            data[key] = dict()
        else:
            k, v = line.lstrip(' \t').split(' = ')
            data[key][k] = [*data[key].get(k,[]), kwargs.get('handler', interpolate_path)(v)]

    data.update({k.split('.')[0]:{k.split('.')[1]:v} for k,v in data.items() if '.' in k})
    for k, v in dict(data).items():
        if '.'in k:
            del data[k]

    return data


def interpolate_path(path):
    backtick = '''`'''
    if not backtick in path:
        return path
    beginning, cmd, end = path.split(backtick)
    res = (
        run(cmd.split(), capture_output=True)
        .stdout
        .decode()
        .strip()
    )

    new_path = ''.join([beginning, res, end])
    if not Path(new_path).exists():
        return path
    Path(new_path).parent.mkdir(parents=True, exist_ok=True)
    Path(new_path).touch()

    return new_path


def num(func):
    def _num(*args, **kwargs):
        ret = func(*args, **kwargs)
        if type(ret) is str:
            try:
                return float(ret) if '.' in ret else int(ret)
            except Exception:
                return ret
        else:
            return ret
    return _num


if __name__ == '__main__':
    try:
        main()
    except Exception:
        raise
        rc = 1

    # exit(rc)
