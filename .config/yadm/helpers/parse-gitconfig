#!/usr/bin/env python3
import argparse
import os
import json
from os.path import join
import re
import sys
from subprocess import run
from pathlib import Path
import logging
import fire
from box import Box
import string

logging.basicConfig(level=logging.DEBUG)


"""
TODO detect parent
"""

def main():
    argparser = argparse.ArgumentParser(
        prog='parse-gitconfig',
        description='''Config parser for 'yadm' command''',
        epilog='TODO')

    config_filename = os.environ['HOME'] + "/.config/yadm/config"
    data = parser(config_filename, handler=interpolate_path)
    print(json.dumps(data))
    # print(json.dumps(data, indent=1))


def parser(config_filename, **kwargs):
    data = parse(Path(config_filename).read_bytes(), **kwargs)
    for path in data.get('include', {}).get('path', []):
        data.update(parser(path))
    return data


# TODO implement \n[foo "bar.baz"]\nfoo = bar\n => as {'foo':{'bar':{'baz':{'foo':'}}}}
#      - parse keys with dots as nested dict/hash
def parse(raw, **kwargs):
    data = dict()
    key = None
    _handler = kwargs.get('handler', lambda x : x)
    import string

    for line in raw.decode().splitlines():
        if line.lstrip().startswith('#'): continue
        if not set(line) - set(string.whitespace): continue

        if line.startswith('['):
            key = line.strip('[]"').split(' "')
            key = '.'.join(key)
            data[key] = dict()
        else:
            k, v = line.lstrip(' \t').split(' = ')
            data[key][k] = [*data[key].get(k,[]), _handler(v)]

    data.update({k.split('.')[0]:{k.split('.')[1]:v} for k,v in data.items() if '.' in k})
    for k, v in dict(data).items():
        if '.'in k:
            del data[k]

    return data


def interpolate_string(_string):
    backtick = '''`'''
    _list = _string.split(backtick)
    commands = _list[1::2]
    new_string = list(_list)

    def _replace(replace, _with):
        index = new_string.index(replace)
        replaced = new_string.pop(index)
        logging.log(logging.DEBUG, replaced)
        new_string.insert(index, _with)

    for cmd in commands:
        res = (
            run(cmd.split(), capture_output=True)
            .stdout
            .decode()
            .strip()
        )

        _replace(cmd, res)

    return ''.join(new_string)


def interpolate_path(path):
    return Path(interpolate_string(path)).expanduser().absolute().__str__()


def num(func):
    def _num(*args, **kwargs):
        ret = func(*args, **kwargs)
        if type(ret) is str:
            try:
                return float(ret) if '.' in ret else int(ret)
            except Exception:
                return ret
        else:
            return ret
    return _num


if __name__ == '__main__':
    try:
        main()
    except Exception:
        raise
        rc = 1

    # exit(rc)
