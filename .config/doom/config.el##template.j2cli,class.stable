{#-*- mode: jinja2 -*-#}
;;; $DOOMDIR/config.el -*- mode: emacs-lisp; lexical-binding: t; -*-

{%- import HOME + '/.config/yadm/macros.j2' as macro -%}
{%- import HOME + '/.config/yadm/vars.j2' as vars -%}

;; STABLE

(global-set-key (kbd "M-RET") 'M-RET!)

{# {%- set map_mod_keys = {"H-r":'consult-buffer' #}
{#                         "H-M-k":'doom/kill-this-buffer-in-all-windows' #}
{#                         "H-\\":'+vterm/toggle' #}
{#                         "M-o w":'highlight-phrase' #}
{#                         "H-q":'windmove-left' #}
{#                         "H-e":'windmove-right' #}
{#                         "H-w":'windmove-up' #}
{#                         "H-s":'windmove-down' #}
{#                         "M-s-q":'windmove-swap-states-left' #}
{#                         "M-s-e":'windmove-swap-states-right' #}
{#                         "M-s-w":'windmove-swap-states-up' #}
{#                         "M-s-s":'windmove-swap-states-down' } -%} #}

(add-load-path! (expand-file-name "load.d" doom-private-dir))

(use-package! -functions :no-require t)

(set (quote bookmark-default-file)
     (expand-file-name "_bookmarks.el" doom-user-dir))

{# "C-c m m": 'mc/mark-all-like-this' #}


(use-package! modus-themes
  :ensure t
  :load-path "~/src/modus-themes"
  :config
  (modus-themes-select 'modus-vivendi-tinted)
  :custom
  (modus-operandi-palette-overrides (quote
                                     ((fg-main "#333333")
                                      (comment red-faint)
                                      (keyword cyan-cooler))))
  (modus-themes-headings (quote
                          ((1 . (variable-pitch 1.5))
                           (2 . (1.3))
                           (agenda-date . (1.3))
                           (agenda-structure . (variable-pitch light 1.8))
                           (t . (1.1)))))
  (modus-themes-variable-pitch-ui t)
  (modus-themes-to-toggle (quote (modus-operandi-tinted modus-vivendi-tinted))))




(plist-put! +ligatures-extra-symbols
            ;; org
            :name          "¬ª"
            :src_block     "¬ª"
            :src_block_end "¬´"
            :quote         "‚Äú"
            :quote_end     "‚Äù"

            ;; ;; Functional
            ;; :lambda        "Œª"
            ;; :def           "∆í"
            ;; :composition   "‚àò"
            ;; :map           "‚Ü¶"
            ;; ;; Types
            ;; :null          "‚àÖ"
            ;; :true          "ùïã"
            ;; :false         "ùîΩ"
            ;; :int           "‚Ñ§"
            ;; :float         "‚Ñù"
            ;; :str           "ùïä"
            ;; :bool          "ùîπ"
            ;; :list          "ùïÉ"
            ;; ;; Flow
            ;; :not           "Ôø¢"
            ;; :in            "‚àà"
            ;; :not-in        "‚àâ"
            ;; :and           "‚àß"
            ;; :or            "‚à®"
            ;; :for           "‚àÄ"
            ;; :some          "‚àÉ"
            ;; :return        "‚üº"
            ;; :yield         "‚üª"
            ;; ;; Other
            ;; :union         "‚ãÉ"
            ;; :intersect     "‚à©"
            ;; :diff          "‚àñ"
            ;; :tuple         "‚®Ç"
            ;; :pipe          "ÓÑµ" ;; FIXME: find a non-private char
            ;; :dot           "‚Ä¢"
            )

(map!
 "<f12>"           #'flycheck-list-errors
 "<f5>"            #'call-last-kbd-macro
 "C-."             #'mc/mark-next-like-this
 "C-<iso-lefttab>" #'flycheck-previous-error
 "C-<tab>"         #'flycheck-next-error
 "C-c SPC SPC"     #'-refresh
 "H-."             #'dired-jump
 "H-/"             #'+default/search-buffer
 "H-0"             #'balance-windows
 ;; "H-8"             #'-mark-all-like-this
 ;; "s-8"             #'(cmd! (isearch-forward-symbol-at-point)(occur))
 "s-8"             (lambda (&rest BODY) (interactive)(isearch-forward-symbol-at-point)(apply (quote occur) BODY))
 "H-;"             #'company-yasnippet
 "H-<backspace>"   #'delete-pair
 "H-<down>"        #'-clone-line-down "s-<down>"        #'-clone-line-down
 "H-<return>"      #'bookmark-jump
 "H-<up>"          #'-clone-line-up "s-<up>"            #'-clone-line-up
 "H-M-0"           #'balance-windows-area
 "H-M-["           #'winner-undo
 "H-M-]"           #'winner-redo
 "H-M-k"           #'doom/kill-this-buffer-in-all-windows
 "H-M-l"           #'toggle-truncate-lines
 "H-M-n"           #'split-window-vertically
 "H-M-p"           #'projectile-switch-project
 "H-["             #'undo
 "H-]"             #'undo-redo
 "H-g"             #'magit-status
 "H-i f"           #'+default/insert-file-path
 "H-k"             #'delete-window
 "H-l"             #'display-line-numbers-mode
 "H-m"             #'+zen/toggle-fullscreen
 "H-n"             #'split-window-horizontally
 "H-p"             #'projectile-find-file
 "H-{"             #'flycheck-previous-error
 "H-}"             #'flycheck-next-error
 "M-["             #'previous-error
 "M-]"             #'next-error
 "M-s-0"           #'balance-windows-area
 "M-s-<return>"    #'org-roam-node-find
 "M-s-["           #'winner-undo
 "M-s-]"           #'winner-redo
 "M-s-k"           #'doom/kill-this-buffer-in-all-windows
 "M-s-l"           #'toggle-truncate-lines
 "M-s-n"           #'split-window-vertically
 "s-."             #'dired-jump
 "s-/"             #'+default/search-buffer
 "s-0"             #'balance-windows
 ;; "s-8"             #'-mark-all-like-this
 "s-;"             #'company-yasnippet
 "s-<backspace>"   #'delete-pair
 "s-<return>"      #'bookmark-jump
 "s-M-k"           #'doom/kill-this-buffer-in-all-windows
 "s-M-p"           #'projectile-switch-project

 "s-["             'undo
 "s-]"             'undo-redo
 "s-g"             #'magit-status
 "s-i f"           #'+default/insert-file-path
 "s-k"             #'delete-window
 "s-l"             #'display-line-numbers-mode
 "s-m s-m"         #'mc/mark-all-like-this
 "s-n"             #'split-window-horizontally
 "s-p"             #'projectile-find-file

 (:prefix "s-SPC"
          "m"         '+zen/toggle-fullscreen
          "SPC"       #'org-roam-node-find
          "."         #'dired-jump
          "TAB"       #'(cmd! (find-file initial-buffer-choice))
          "["         #'mc/edit-beginnings-of-lines
          "]"         #'mc/edit-enda-of-lines
          "a"         #'mc/edit-beginnings-of-lines
          "b"         #'doom-big-font-mode
          "c"         #'doom/goto-private-config-file
          "e"         #'mc/edit-enda-of-lines
          "h"         #'(cmd! (dired "~"))
          "n"         #'org-capture
          "q"         #'delete-other-windows
          "r"         nil
          "s"         #'org-narrow-to-subtree
          "s-SPC"     #'-refresh
          "s-q"       #'delete-other-frames
          "x"         #'doom/open-scratch-buffer
          "~"         #'(cmd! (dired "~")))

 (:prefix "H-SPC"
          "."         #'dired-jump
          "H-SPC"     #'-refresh
          "H-q"       #'delete-other-frames
          "TAB"       #'(cmd! (find-file initial-buffer-choice))
          "["         #'mc/edit-beginnings-of-lines
          "]"         #'mc/edit-enda-of-lines
          "a"         #'mc/edit-beginnings-of-lines
          "b"         #'doom-big-font-mode
          "c"         #'doom/goto-private-config-file
          "e"         #'mc/edit-enda-of-lines
          "h"         #'(cmd! (dired "~"))
          "l"         #'-open-library-of-babel
          "m"         #'mc/mark-all-like-this ;FIXME
          "n"         #'org-capture
          "q"         #'delete-other-windows
          "r"         nil
          "s"         #'org-narrow-to-subtree
          "x"         #'doom/open-scratch-buffer
          "~"         #'(cmd! (dired "~"))

          )
 )
(map!
 "M-o l" #'highlight-lines-matching-regexp
 "M-o r" #'highlight-regexp
 "M-o w" #'highlight-phrase)

(map!
 :map dired-mode-map
 "]"   #'dired-next-marked-file
 "["   #'dired-prev-marked-file
 "."  #'dired-up-directory

 ("," nil
  :prefix ","
  "," #'dired-unmark-all-marks)

 ;; ("." nil
 ;;  :prefix "."
 ;;  "." #'dired-up-directory)

 ("/" nil
  :prefix "/"
  "/" #'dired-mark-files-regexp
  "." #'dired-mark-files-containing-regexp))

(map!

 "<f12>"           #'flycheck-list-errors
 "<f5>"            #'call-last-kbd-macro
 "C-."             #'mc/mark-next-like-this
 "C-<iso-lefttab>" #'flycheck-previous-error
 "C-<tab>"         #'flycheck-next-error
 "C-c SPC SPC"     #'-refresh
 "H-."             #'dired-jump
 "H-/"             #'+default/search-buffer
 "H-0"             #'balance-windows
 ;; "H-8"             #'-mark-all-like-this
 ;; "s-8"             #'(cmd! (isearch-forward-symbol-at-point)(occur))
 "s-8"             (lambda (&rest BODY) (interactive)(isearch-forward-symbol-at-point)(apply (quote occur) BODY))
 "H-;"             #'company-yasnippet
 "H-<backspace>"   #'delete-pair
 "H-<down>"        #'-clone-line-down "s-<down>"        #'-clone-line-down
 "H-<return>"      #'bookmark-jump
 "H-<up>"          #'-clone-line-up "s-<up>"            #'-clone-line-up
 "H-M-0"           #'balance-windows-area
 "H-M-["           #'winner-undo
 "H-M-]"           #'winner-redo
 "H-M-k"           #'doom/kill-this-buffer-in-all-windows
 "H-M-l"           #'toggle-truncate-lines
 "H-M-n"           #'split-window-vertically
 "H-M-p"           #'projectile-switch-project
 "H-["             #'undo
 "H-]"             #'undo-redo
 "H-g"             #'magit-status
 "H-i f"           #'+default/insert-file-path
 "H-k"             #'delete-window
 "H-l"             #'display-line-numbers-mode
 "H-m"             #'+zen/toggle-fullscreen
 "H-n"             #'split-window-horizontally
 "H-p"             #'projectile-find-file
 "H-{"             #'flycheck-previous-error
 "H-}"             #'flycheck-next-error
 "M-["             #'previous-error
 "M-]"             #'next-error
 "M-s-0"           #'balance-windows-area
 "M-s-<return>"    #'org-roam-node-find
 "M-s-["           #'winner-undo
 "M-s-]"           #'winner-redo
 "M-s-k"           #'doom/kill-this-buffer-in-all-windows
 "M-s-l"           #'toggle-truncate-lines
 "M-s-n"           #'split-window-vertically
 "s-."             #'dired-jump
 "s-/"             #'+default/search-buffer
 "s-0"             #'balance-windows
 ;; "s-8"             #'-mark-all-like-this
 "s-;"             #'company-yasnippet
 "s-<backspace>"   #'delete-pair
 "s-<return>"      #'bookmark-jump
 "s-M-k"           #'doom/kill-this-buffer-in-all-windows
 "s-M-p"           #'projectile-switch-project

 "s-["             'undo
 "s-]"             'undo-redo
 "s-g"             #'magit-status
 "s-i f"           #'+default/insert-file-path
 "s-k"             #'delete-window
 "s-l"             #'display-line-numbers-mode
 "s-m s-m"         #'mc/mark-all-like-this
 "s-n"             #'split-window-horizontally
 "s-p"             #'projectile-find-file

 (:prefix "s-SPC"
          "m"         '+zen/toggle-fullscreen
          "SPC"       #'org-roam-node-find
          "."         #'dired-jump
          "TAB"       #'(cmd! (find-file initial-buffer-choice))
          "["         #'mc/edit-beginnings-of-lines
          "]"         #'mc/edit-enda-of-lines
          "a"         #'mc/edit-beginnings-of-lines
          "b"         #'doom-big-font-mode
          "c"         #'doom/goto-private-config-file
          "e"         #'mc/edit-enda-of-lines
          "h"         #'(cmd! (dired "~"))
          "n"         #'org-capture
          "q"         #'delete-other-windows
          "r"         nil
          "s"         #'org-narrow-to-subtree
          "s-SPC"     #'-refresh
          "s-q"       #'delete-other-frames
          "x"         #'doom/open-scratch-buffer
          "~"         #'(cmd! (dired "~")))

 (:prefix "H-SPC"
          "."         #'dired-jump
          "H-SPC"     #'-refresh
          "H-q"       #'delete-other-frames
          "TAB"       #'(cmd! (find-file initial-buffer-choice))
          "["         #'mc/edit-beginnings-of-lines
          "]"         #'mc/edit-enda-of-lines
          "a"         #'mc/edit-beginnings-of-lines
          "b"         #'doom-big-font-mode
          "c"         #'doom/goto-private-config-file
          "e"         #'mc/edit-enda-of-lines
          "h"         #'(cmd! (dired "~"))
          "l"         #'-open-library-of-babel
          "m"         #'mc/mark-all-like-this ;FIXME
          "n"         #'org-capture
          "q"         #'delete-other-windows
          "r"         nil
          "s"         #'org-narrow-to-subtree
          "x"         #'doom/open-scratch-buffer
          "~"         #'(cmd! (dired "~"))

          )
 )

(map!
 "H-r" #'consult-buffer
 "s-r" #'consult-buffer
 "H-M-k" #'doom/kill-this-buffer-in-all-windows
 "M-s-k" #'doom/kill-this-buffer-in-all-windows
 "H-\\"   #'+vterm/toggle
 "s-\\"   #'+vterm/toggle
 "M-o l"  #'highlight-lines-matching-regexp
 "M-o r"  #'highlight-regexp
 "M-o w"  #'highlight-phrase
 "s-q"    #'windmove-left
 "s-e"    #'windmove-right
 "s-w"    #'windmove-up
 "s-s"    #'windmove-down
 "H-q"    #'windmove-left
 "H-e"    #'windmove-right
 "H-w"    #'windmove-up
 "H-s"    #'windmove-down
 "M-s-q"  #'windmove-swap-states-left
 "M-H-q"  #'windmove-swap-states-left
 "M-s-e"  #'windmove-swap-states-right
 "M-H-e"  #'windmove-swap-states-right
 "M-s-w"  #'windmove-swap-states-up
 "M-H-w"  #'windmove-swap-states-up
 "M-s-s"  #'windmove-swap-states-down
 "M-H-s"  #'windmove-swap-states-down
 "C-c m m" 'mc/mark-all-like-this
 )

(use-package! -macros
  :no-require t
  :config
  (defmacro -all-windows ()
    `(flatten-list (mapcar #'window-list (frame-list))))

  (defmacro -all-buffers ()
    `(flatten-list (mapcar #'buffer-list (frame-list))))

  (defmacro -all-window-buffers ()
    `(flatten-list (mapcar #'window-buffer (-all-windows))))

  (defmacro -all-process-buffers ()
    `(flatten-list (mapcar #'process-buffer (process-list))))

  (defmacro -get-buffer ($buffer-name)
    `(get-buffer
      (with-temp-buffer
        (insert (with-output-to-string
                  (princ (-all-process-buffers))))
        (re-search-backward (rx ?* ,(eval $buffer-name) ?*) nil t)
        (buffer-substring (match-beginning 0)
                          (match-end 0))))))

(use-package! -functions
  :no-require t
  :config
  (defun -refresh (&rest _)
    "TODO add `-refresh' as hook to `display-buffer'"
    (interactive)
    (ignore-errors (doom/reload-font))
    (recentf-cleanup)

    (if (region-active-p)
        (yas-new-snippet)
      (let ((window-count (length (window-list)))) ;
        (let ((one-window (eq window-count 1))
              (xdg-dir (getenv "XDG_RUNTIME_DIR"))
              (writeroom (featurep 'writeroom-room))
              (python (eq major-mode 'python-mode))
              (py (eq major-mode 'python-mode))
              (elisp (eq major-mode 'emacs-lisp-mode))
              (el (eq major-mode 'emacs-lisp-mode))
              (indirect-buffer (quote TODO)))
          (quote (when xdg-dir           ;FIXME
                  (let ((desktop-dir (expand-file-name "desktop" xdg-dir))
                        (PARENTS t))
                    (mkdir desktop-dir PARENTS)
                    (if one-window
                        (desktop-change-dir desktop-dir) ;; FIXME
                      (desktop-save desktop-dir))))))))

    (widen)
    (whitespace-cleanup)
    (bookmark-save)
    ;; (sh!! "git rev-parse --show-toplevel")
    (balance-windows)
    (cond ((eq major-mode 'python-mode)
           (unless (window--process-window-list)
             (progn
               (python-shell-restart)))))
    (cond ((eq major-mode 'org-mode)
           (org-babel-tangle))
          (t (save-window-excursion (org-babel-detangle)))))

  (defun -clone-line-down (&rest args)
    (interactive "*p")
    (message "clone-line-up %s" (quote args))
    (save-excursion
      (beginning-of-line)
      (insert (buffer-substring (eol)(bol)) "\n")))

  (defun -clone-line-up ()              ;FIXME
    (interactive "*p")
    (line! -1)
    (message "clone-line-down %s"))

  ;; TODO when symbol at point is interactive defun; display bindings

  (defun -list (&rest list)
    (interactive
     (insert
      (completing-read "Insert filename:"
                       (-fd "-tf --max-depth=${_FD_MAX_DEPTH:-4} . $HOME/")))))

  (defun -zsh-history (&rest list)
    (interactive
     (insert
      (completing-read "Insert zsh history"
                       (let ((exe "zsh")
                             (prefix "")
                             (args (format "-c '%s'"
                                           "print -ln ${(F)history}|sort|uniq")))
                         (delete nil (split-string
                                      (shell-command-to-string
                                       (concat prefix exe args (eval `(concat ,@ARGS))))
                                      "\n")))))))

  (defun -fd (&rest ARGS)
    (let ((exe "fd")
          (prefix "/usr/bin/env -")
          (args (concat "--print0 --hidden")))
      (delete nil (split-string
                   (shell-command-to-string
                    (concat prefix exe args (eval `(concat ,@ARGS))))
                   "\0"))))

  (defun -cmd-on-buffer (CMD)
    (shell-command-on-region (point-min) (point-max) CMD nil t))

  (defun -command-on-buffer ()
    (interactive
     (-cmd-on-buffer
      (completing-read
       "Apply script on buffer:"
       (split-string-and-unquote (shell-command-to-string "bash -c 'compgen -A command'"))))))

  (defun -script-on-buffer ()
    (interactive
     (-cmd-on-buffer
      (completing-read
       "Apply script on buffer:"
       (-fd "-tf -tx --max-depth=${_FD_MAX_DEPTH:-3} . $HOME/"))))))
