;;; $DOOMDIR/config.el -*- mode: emacs-lisp; lexical-binding: t; -*-
;;; TODO sway-mode
;;; TODO magit + yadm: list todos, but limit to files git
;;; TODO change alpha when loosing frame focus ()

(defun -config-el-eol-hook ())
(defun -config-el-timer-hook ())

;; (run-with-timer 0 (* 30 60) '-config-el-timer-hook)
;; (run-with-timer 0 60 '-config-el-timer-hook)

(mapcar (lambda (x) (load-file x))
      (file-expand-wildcards
       (format "%s/_*.el" (expand-file-name "conf.d" doom-private-dir))))

(defun my/-config-el-timer-hook ()
  (string-match (rx ?* "Org Agenda" ?*)
   (mapconcat (lambda (BUFFER) (buffer-name BUFFER))
              (-all-buffers) " "))
  (org-agenda nil "t"))

(add-hook (quote -config-el-timer-hook)
          (quote my/-config-el-timer-hook))

(when (getenv "XDG_RUNTIME_DIR")
  (desktop-save (expand-file-name (getenv "XDG_RUNTIME_DIR"))))

(setq-hook! (quote (org-mode-hook))
  display-line-numbers-mode -1)

(quote
 (setq
  doom-font                (font-spec :family "Input Mono Narrow" :size 12 :weight 'semi-light)
  doom-variable-pitch-font (font-spec :family "Fira Sans") ; inherits `doom-font''s :size
  doom-unicode-font        (font-spec :family "Input Mono Narrow" :size 12)
  doom-big-font            (font-spec :family "Fira Mono" :size 19)))

(setq doom-font
      (font-spec :family "Iosevka Nerd Font" :size 16  :weight 'light))

(add-hook! (quote (rainbow-mode))
           (hl-line-mode -1))

(use-package! conf-mode
  :mode (rx "sway"))

(setq-hook!
    (quote (fundamental-mode-hook prog-mode-hook text-mode-hook))
  header-line-format
  (quote ("%e"
          (:eval))))

(set (quote +snippets-dir)
     (or (expand-file-name "snippets" (file-truename doom-user-dir))
         (expand-file-name "snippets" (expand-file-name doom-user-dir))))

(set (quote doom-theme)
     (quote doom-dracula))

(set (quote doom-scratch-initial-major-mode)
     (quote fundamental-mode))

(global-set-key (kbd "H-b") 'backward-word) ; H = Hyper modifier

(mkdir "~/.local/emacs" t)

(set (quote custom-file)
     (expand-file-name "custom.el" "~/.local/emacs"))

(set (quote comint-move-point-for-output) t)

(set (quote doom-modeline-major-mode-icon) t)

(defmacro %string (&rest BODY)
  `(mapconcat (quote symbol-name) (quote (,@BODY)) " "))

(set (quote -dired-ignore-extensions)
     (concat "--ignore=*."
             (mapconcat (quote symbol-name)
                        (quote (zip gz)) " --ignore=*.")))

(let ((% (concat -dired-ignore-extensions
                 " "
                 (%string --block-size=1
                          --group-directories-first
                          --human-readable
                          --numeric-uid-gid
                          --ignore-backups
                          --color=never
                          --no-group))))
  (setq-hook! (quote (dired-mode-hook))
    dired-listing-switches %))

(let ((% (mapconcat 'symbol-name (quote (-dired-ignore-extensions -dired-longopts)) " ")))
  (setq-hook! (quote dired-mode-hook)
    dired-listing-switches %))

(set (quote doom-projectile-cache-blacklist)
     (quote ("/tmp")))

(set (quote bookmark-default-file)
     (expand-file-name "_bookmarks.el" doom-user-dir))

(set (quote shift-select-mode)
     nil)

(set (quote display-line-numbers-type)
     nil)

(set-ligatures! (quote org-mode)
  :src_block "#+src_begin"
  :true "yes" :false "no"
  )

(plist-put! +ligatures-extra-symbols
            ;; org
            :name          "»"
            :src_block     "»"
            :src_block_end "«"
            :quote         "“"
            :quote_end     "”"
            ;; ;; Functional
            ;; :lambda        "λ"
            ;; :def           "ƒ"
            ;; :composition   "∘"
            ;; :map           "↦"
            ;; ;; Types
            ;; :null          "∅"
            ;; :true          "𝕋"
            ;; :false         "𝔽"
            ;; :int           "ℤ"
            ;; :float         "ℝ"
            ;; :str           "𝕊"
            ;; :bool          "𝔹"
            ;; :list          "𝕃"
            ;; ;; Flow
            ;; :not           "￢"
            ;; :in            "∈"
            ;; :not-in        "∉"
            ;; :and           "∧"
            ;; :or            "∨"
            ;; :for           "∀"
            ;; :some          "∃"
            ;; :return        "⟼"
            ;; :yield         "⟻"
            ;; ;; Other
            ;; :union         "⋃"
            ;; :intersect     "∩"
            ;; :diff          "∖"
            ;; :tuple         "⨂"
            ;; :pipe          "" ;; FIXME: find a non-private char
            ;; :dot           "•"
            )

(quote
 (setq +ligatures-extra-alist
  (quote
   ((dired-mode
     ("rwx" . "7")
     ("rw-" . "6")
     ("r-x" . "5")
     ("r--" . "4")
     ("-wx" . "3")
     ("-r-" . "2")
     ("--x" . "1")
     ("---" . "0"))

    (emacs-lisp-mode
     ("lambda" . "λ")
     ("'\\\\''" . "⍞"))

    (org-mode
     ("#+BEGIN_QUOTE" . "“")
     ("#+BEGIN_SRC" . "»")
     ("#+END_QUOTE" . "”")
     ("#+END_SRC" . "«")
     ("#+NAME:" . "»")
     ("#+begin_quote" . "“")
     ("#+begin_src" . "»")
     ("#+end_quote" . "”")
     ("#+end_src" . "«")
     ("#+name:" . "»")
     ("no" . "𝔽")
     ("yes" . "𝕋"))

    (sh-mode
     ("[[" . "⟦")
     ("]]" . "⟧")
     ("function" . "ƒ")
     ("true" . "𝕋")
     ("false" . "𝔽")
     ("!" . "￢")
     ("&&" . "∧")
     ("||" . "∨")
     ("in" . "∈")
     ("for" . "∀")
     ("return" . "⟼")
     ("." . "•")
     ("source" . "•")
     ("function" . "ƒ")
     ("true" . "𝕋")
     ("false" . "𝔽")
     ("!" . "￢")
     ("&&" . "∧")
     ("||" . "∨")
     ("in" . "∈")
     ("for" . "∀")
     ("return" . "⟼")
     ("." . "•")
     ("source" . "•")
     ("function" . "ƒ")
     ("true" . "𝕋")
     ("false" . "𝔽")
     ("!" . "￢")
     ("&&" . "∧")
     ("||" . "∨")
     ("in" . "∈")
     ("for" . "∀")
     ("return" . "⟼")
     ("." . "•")
     ("source" . "•")
     ("." . "•")
     ("return" . "⟼")
     ("for" . "∀")
     ("in" . "∈")
     ("||" . "∨")
     ("&&" . "∧")
     ("!" . "￢")
     ("false" . "𝔽")
     ("true" . "𝕋")
     ("function" . "ƒ"))
    (t)))))

(after! python
  (set (quote +python-ipython-repl-args)
       (quote ("-i" "--simple-prompt" "--no-color-info")))

  (set (quote +python-jupyter-repl-args)
       (quote ("--simple-prompt"))))

(after! org
  (use-package! ob-tmux
    ;; Install package automatically (optional)
    :ensure t
    :custom
    (org-babel-default-header-args:tmux
     '((:results . "silent")	;
       (:session . "default")	; The default tmux session to send code to
       (:socket  . nil)))		; The default tmux socket to communicate with
    ;; The tmux sessions are prefixed with the following string.
    ;; You can customize this if you like.
    (org-babel-tmux-session-prefix "ob-")
    ;; The terminal that will be used.
    ;; You can also customize the options passed to the terminal.
    ;; The default terminal is "gnome-terminal" with options "--".
    (org-babel-tmux-terminal "alacritty")
    (org-babel-tmux-terminal-opts '("-T" "ob-tmux" "-e"))
    ;; Finally, if your tmux is not in your $PATH for whatever reason, you
    ;; may set the path to the tmux binary as follows:
    (org-babel-tmux-location "/usr/bin/tmux"))

  (let ((% (expand-file-name "agenda.lst" doom-user-dir)))
    (unless (file-exists-p %)
      (write-file % nil))
    (set (quote org-agenda-files) %))

  (set (quote default)
       (quote ((org-babel-default-header-args . (default-value (quote org-babel-default-header-args))))))

  (set (quote org-babel-default-header-args)
       (quote ((:session . "none")
               (:noweb . "yes")
               (:exports . "code")
               (:mkdirp . "yes")
               (:cache . "no")
               (:tangle-mode . 384)     ; (identity #o0600)
               (:results . "replace")
               (:comments . "link")
               (:hlines . "no")
               (:tangle . "no"))))

  (set (quote org-babel-default-header-args:python)
       (quote ((:tangle-mode . 448))))

  (set (quote org-babel-default-header-args:sh)
       (quote ((:session . "none")
               (:tangle-mode . 448)
               (:mkdirp . "yes"))))

  (set (quote org-babel-default-header-args:zsh)
       (quote ((:results . "raw replace drawer"))))

  (set (quote org-babel-default-header-args:bash)
       (quote ((:session . "none")
               (:tangle-mode . 448)
               (:prologue . ". ~/.functions;. ~/.aliases")
               (:results . "raw replace drawer")
               (:mkdirp . "yes"))))

  (set (quote org-babel-default-header-args:cat)
       (quote ()))

  ;; (org-babel-shell-initialize)

  ;; (add-to-list 'org-babel-shell-names "cat")

  (ignore-errors
    (org-babel-lob-ingest (or (format "%s/_lob.org" doom-user-dir))))

  (defun ek/babel-ansi ()
    (when-let ((beg (org-babel-where-is-src-block-result nil nil)))
      (save-excursion
        (goto-char beg)
        (when (looking-at org-babel-result-regexp)
          (let ((end (org-babel-result-end))
                (ansi-color-context-region nil))
            (ansi-color-apply-on-region beg end))))))

  (defun -babel-ansi ()
    "TODO Apply ANSI colors on region after"
    (save-excursion
      (when (looking-at org-babel-result-regexp)
        (let ((end (org-babel-result-end))
              (ansi-color-context-region nil))
          (ansi-color-apply-on-region beg end)))))

  (add-hook 'org-babel-after-execute-hook 'ek/babel-ansi))

(defmacro sh!! (CMDLINE)
  `(ignore-errors
     (string= "0" (string-trim (shell-command-to-string (concat ,CMDLINE " &> /dev/null; echo $?"))))))

(defmacro ENV! ()
  "Convert environment vars into assoc list (hash table)"
  `(mapcar
    (lambda (_)
      (let* ((LIST (split-string-and-unquote _ "="))
             (KEY (car LIST))
             (VALUE (mapconcat (lambda(_)_) (cdr LIST) "=")))
        `(,(intern KEY) . ,VALUE)))
    (split-string-and-unquote (sh! "cat /proc/$PPID/environ") "\0")))

(defun M-RET! (&rest BODY)
  "Default M-RET action"
  (interactive)
  (quote (progn
           (unless (string= "-" (projectile-project-name))
             (recompile))))
  (eval (assoc-default major-mode -compile)))

(defun M-RET! (&rest BODY)
  "Default M-RET action"
  (interactive)
  (cond
   ((eq major-mode (quote python-mode))
    (run-python)
    (unless (string-match "*Python*" (with-output-to-string (princ (-all-window-buffers))))
      (switch-to-buffer-other-window "*Python*"))
    (let ((% (buffer-file-name)))
      (if % (python-shell-send-file %) (python-shell-send-buffer))))
   (t (let ((compile-command (format "command /usr/bin/env , %s" (buffer-file-name))))
        (recompile)))))

(defvar -compile
  (quote
   ;; EXPECT / TCL
   ((tcl-mode . (recompile))

    ;; YAML
    (yaml-mode .  (progn (when nil
                           (setq-local compile-command (format "command /usr/bin/env ./%" (buffer-file-name)))
                           (recompile))
                         (recompile)))

    ;; MAKEFILE
    (makefile-gmake-mode .  (recompile))

    ;; EMACS LISP
    (emacs-lisp-mode .  (eval-buffer))

    ;; SHELL
    (sh-mode . (progn (let (($ (buffer-file-name))
                            (% (make-temp-file nil nil ".sh")))
                        (save-excursion
                          (goto-char 0)
                          (when (looking-at (rx "bash")) (setq-local compile-command (format "cp %s %s; bash $_" $ %))) ;; FIXME
                          (when (looking-at (rx "zsh")) (setq-local compile-command (format "cp %s %s; zsh $_" $ %)))) ;; FIXME
                        (unless (string= "-" (projectile-project-name))
                          (recompile)))))

    ;; PYTHON
    (python-mode . (progn
                     (let (($ python-shell-buffer-name)
                           (% (buffer-file-name))
                           (prev (get-buffer (buffer-name))))

                       (unless (-is-running $)
                         (run-python))

                       (message "DEBUG:%s" %)

                       (python-shell-send-file %)

                       (unless (-is-visible $)
                         (progn
                           (when (eq 1 (count-windows))
                             (split-window-sensibly))
                           (switch-to-buffer-other-window
                            (-get-buffer python-shell-buffer-name))))))))))

(global-set-key (kbd "M-RET") #'M-RET!)
(global-set-key (kbd "s-p") (quote projectile-find-file))

(after! conf-mode
  (highlight-phrase "bindsym" 'bold)
  ;; (highlight-phrase "")
  )

(setq-hook! (quote (comint-mode-hook))
  comint-buffer-maximum-size 20000 ; Increase comint buffer size.
  comint-prompt-read-only t )      ; Make the prompt read only.

(use-package! dockerfile-mode
  :init (setenv "DOCKER_BUILDKIT" "1")
  :mode "dockerfile\(?:\.[[:word:]]+\)?\'"
  :custom
  (dockerfile-mode-command "docker buildx build"))

(use-package! modus-themes
  :ensure t
  :load-path "~/src/modus-themes"
  :config
  (modus-themes-select 'modus-vivendi-tinted)
  :custom
  (modus-operandi-palette-overrides (quote
                                     ((fg-main "#333333")
                                      (comment red-faint)
                                      (keyword cyan-cooler))))
  (modus-themes-headings (quote
                          ((1 . (variable-pitch 1.5))
                           (2 . (1.3))
                           (agenda-date . (1.3))
                           (agenda-structure . (variable-pitch light 1.8))
                           (t . (1.1)))))
  (modus-themes-variable-pitch-ui t)
  (modus-themes-to-toggle (quote (modus-operandi-tinted modus-vivendi-tinted))))

(defun yadm ()
  (interactive)
  (magit-status "/yadm::"))

(after! tramp
  (add-to-list (quote tramp-methods)
               (quote ("yadm"
                       (tramp-login-program "yadm")
                       (tramp-login-args (("enter")))
                       (tramp-login-env (("SHELL") ("/bin/sh")))
                       (tramp-remote-shell "/bin/sh")
                       (tramp-remote-shell-args ("-c"))))))

(after! ob-async
  (setq ob-async-no-async-languages-alist '("ipython" "python")))

(after! rainbow-delimiters
  (add-hook! (quote (python-mode-hook))
    (quote rainbow-delimiters-mode))
  (custom-set-faces
   '(rainbow-delimiters-depth-1-face ((t (:foreground "gray"))))))

(ignore-errors
  (load-file (format "~/.%s.el" (getenv "HOSTNAME"))))


;; (-config-el-eol-hook)

;; (add-hook! (quote (-config-el-eol-hook))
;;   (require '-functions nil t)
;;   (progn
;;     (setq -reloaded (boundp '-reloaded)
;;           -toggle   (boundp '-reloaded)
;;           compilation-scroll-output t
;;           input-method              "norwegian-keyboard")
;;     (blink-cursor-mode 1)
;;     (global-hide-mode-line-mode 1)
;;     ;; (global-hide-mode-line-mode -1)
;;     ;; (hide-mode-line-mode t)
;;     (set-frame-parameter nil 'alpha-background 100)
;;     ;; (set-frame-parameter nil 'alpha-background 90) ;uncomment to enable opacity
;;     ;; (add-to-list (quote so-long-minor-modes) (quote smartparens-mode))
;;     (setq-hook! (quote conf-mode-hook js-mode-hook)
;;       display-line-numbers-type (quote absolute))))
