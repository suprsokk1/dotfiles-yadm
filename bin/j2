#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
TODO PYTHONSTARTUP in global environment
TODO act like wrapper for j2 when not called by yadm
~/.sway/config##template.j2,class.unstable
-o
~/.sway/config.343865.28874
"""

import os
import re
import sys
from subprocess import run, Popen, PIPE, DEVNULL
from pathlib import Path
from jinja2 import Environment, Template, ChoiceLoader, DictLoader, FileSystemLoader
from jinja2.exceptions import UndefinedError
from collections import defaultdict

pythonrc_fallback = '{}/.pythonrc'.format(os.environ['HOME'])
with open(os.environ.get('PYTHONSTARTUP', pythonrc_fallback), 'r') as fd: exec(fd.read())

import importlib.util
from box import Box

try:
    from docopt import docopt   # FIXME
except Exception:
    pass



def main():
    args = sys.argv if sys.argv[1:] else None, '~/.zshrc##template.j2', None, '/tmp/config.XXXXX.YYYYY'
    (_, template_path, _, template_output_path) = args

    try:
        yadm(
            template_path,
            template_output_path,
            testing=False if sys.argv[1:] else True
        )
    except Exception as e:
        logger.error(e)
        sys.exit(1)


# @logger.catch
def yadm(template_path, template_output_path, **kwargs):
    template_load_path = '''{HOME}/.config/yadm'''.format(**os.environ)
    choice_loader = ChoiceLoader([
        FileSystemLoader(os.environ['HOME'] + '/.config/yadm/'),
    ])
    environment = Environment(loader=choice_loader)
    # template = environment.from_string(template_content)
    # FIXME vvvvvv and ^^^^^^ template lookup fail on render

    header_template = (
        (Path(template_load_path) / 'macro.j2')
        .read_text()
    )

    input_template = (
        Path(template_path)
        .expanduser()
        .read_text()
    )

    comment_char = '#'
    if template_output_path.endswith('.el'):
        comment_char = ';'

    comment_length = 3
    head = "{0} RENDRED FROM TEMPLATE {0}".format(comment_char*comment_length)
    tail = "{0} RENDRED FROM TEMPLATE {0}".format(comment_char*comment_length)
    head = ''

    template_content_string = """\
{_if}
{0}
{1}
{3}
{_else}
{2}

######################################
# ################################## #
# # !!! PROBLEM LOADING DATA  !!!  # #
# ################################## #
######################################

{_endif}
""".format(
    head, header_template, input_template, tail,
    _if="""{%- if LEFT_PARENTHESIS is defined -%}""",
    _else="""{%- else -%}""",
    _endif="""{%- endif -%}""",
)

    jinja_template = environment.from_string(template_content_string)
    data = load()
    _vars = Vars()
    # logger.debug(_vars)
    data.update(_vars.__dict__)

    # data['LEFT_PARENTHESIS']

    # render template
    with open(template_output_path, 'w') as fd:
        fd.write(jinja_template.render(**data))
        # fd.write(template.render(**data))

    logger.info("DONE")



def yadm(template_path, template_output_path, **kwargs):
    template_load_path = '''{HOME}/.config/yadm'''.format(**os.environ)
    choice_loader = ChoiceLoader([
        FileSystemLoader(os.environ['HOME'] + '/.config/yadm/'),
    ])
    environment = Environment(loader=choice_loader)

    header_template = (
        (Path(template_load_path) / 'macro.j2')
        .read_text()
    )

    input_template = (
        Path(template_path)
        .expanduser()
        .read_text()
    )

    jinja_template = environment.from_string(template_content_string)
    data = load()
    _vars = Vars()

    # render template
    with open(template_output_path, 'w') as fd:
        fd.write(jinja_template.render(**data))
        # fd.write(template.render(**data))

    logger.info("DONE")


def load():
    template_load_path = '''{HOME}/.config/yadm'''.format(**os.environ)
    data_cmd = '''{HOME}/.config/yadm/helpers/parse-gitconfig'''.format(**os.environ)
    default_camelkiller_boxdots = Box(default_box=True, camel_killer_box=True, box_dots=True)
    camelkiller_boxdots = Box(default_box=False, camel_killer_box=True, box_dots=True)
    boxdots = Box(default_box=False, camel_killer_box=True, box_dots=False)

    res = (
        run(data_cmd.split(), shell=False, capture_output=True)
        .stdout
        .decode()
    )

    data = boxdots.from_json(res)

    try:
        logger.debug(data.meta.rootvar)
    except Exception as e:
        logger.warning(e)

    # # TODO put vars at root level
    # if False:
    #     for var in data.meta.rootvar:
    #         print(var)
    #         print(eval(f"data.{var}"))
    #         print(eval(f"data.meta.{var}"))

    data.update({k:v for k,v in os.environ.items()
                 if any(tuple(map(lambda x : k.startswith(x), 'HOME SSH'.split())))
                 or any(tuple(map(lambda x : k == x, ''.split())))})

    data = data.to_dict()
    data.update(Vars.__dict__)

    return data


def load_ng():
    template_load_path = '''{HOME}/.config/yadm'''.format(**os.environ)
    data_cmd = '''{HOME}/.config/yadm/helpers/parse-gitconfig'''.format(**os.environ)

    # module_path = '{XDG_CONFIG_HOME}/yadm/src/site-packages/betterdict/betterdict/betterdict.py'.format(**os.environ)
    module_path = '{HOME}/.config/yadm/src/site-packages/betterdict/betterdict/betterdict.py'.format(**os.environ)
    spec = importlib.util.spec_from_file_location("betterdict.BetterDict", module_path)
    _mod = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(_mod)

    res = (
        run(data_cmd.split(), shell=False, capture_output=True)
        .stdout
        .decode()
    )

    data = _mod.BetterDict()
    data.from_command(data_cmd)

    data.update({k:v for k,v in os.environ.items()
                 if any(tuple(map(lambda x : k.startswith(x), 'HOME SSH'.split())))
                 or any(tuple(map(lambda x : k == x, ''.split())))})

    data = data.to_dict()
    data.update(Vars.__dict__)

    return data

class Vars(object):
    COMMA = ','
    EQUAL = '='
    PERCENT = '%'
    HYPHEN = '-'
    EXCLAMATION_MARK = '!'
    PLUSS = '+'
    QUOTE = "'"
    SPACE = ' '
    NEWLINE = '\n'
    TAB = '\t'
    LEFT_PARENTHESIS = '('
    RIGHT_PARENTHESIS = ')'
    PARENTHESIS = dict(left=LEFT_PARENTHESIS, right=RIGHT_PARENTHESIS)
    LEFT_CURLYBRACKET = '{'
    RIGHT_CURLYBRACKET = '}'
    CURLYBRACKET = dict(left=LEFT_CURLYBRACKET, right=RIGHT_CURLYBRACKET)
    LEFT_BRACKET = '['
    RIGHT_BRACKET = ']'
    BRACKET = dict(left=LEFT_BRACKET, right=RIGHT_BRACKET)
    DELIMITER = {RIGHT_PARENTHESIS:LEFT_PARENTHESIS, LEFT_PARENTHESIS: RIGHT_PARENTHESIS, RIGHT_CURLYBRACKET:LEFT_CURLYBRACKET, LEFT_CURLYBRACKET: RIGHT_CURLYBRACKET, RIGHT_BRACKET:LEFT_BRACKET, LEFT_BRACKET: RIGHT_BRACKET}
    DELIMITER_BEGINNING = {RIGHT_PARENTHESIS:LEFT_PARENTHESIS, LEFT_PARENTHESIS: LEFT_PARENTHESIS, RIGHT_CURLYBRACKET:LEFT_CURLYBRACKET, LEFT_CURLYBRACKET: RIGHT_CURLYBRACKET, RIGHT_BRACKET:LEFT_BRACKET, LEFT_BRACKET: LEFT_BRACKET}
    DELIMITER_END = {RIGHT_PARENTHESIS:RIGHT_PARENTHESIS, LEFT_PARENTHESIS: RIGHT_PARENTHESIS, RIGHT_CURLYBRACKET:LEFT_CURLYBRACKET, LEFT_CURLYBRACKET: RIGHT_CURLYBRACKET, RIGHT_BRACKET:RIGHT_BRACKET, RIGHT_BRACKET: RIGHT_BRACKET}
    doom_emacs_packages = ['rainbow-delimiters', 'systemd-mode', 'mmm-mode', 'sway', 'ob-tmux']
    zsh_env = dict(ZSH='$HOME/.oh-my-zsh', ZSH_THEME='simple')
    zsh_plugins = ['zsh-autosuggestions', 'direnv', 'fzf', 'tmux']
    static_dirs = dict(yadm='${HOME}/.config/yadm', run='${XDG_RUNTIME_DIR:-/run/user/${EUID:-$(id -u)}}', config='${XDG_CONFIG_HOME:-${HOME}/.config}', fonts='${HOME}/.local/share/fonts', autorun='${HOME}/.config/autorun', desktop='${HOME}/.local/share/applications', apps='${HOME}/.local/share/applications', zsh='$ZSH')
    path = ['$HOME/bin', '$HOME/.pyenv/bin', '/usr/bin', '/usr/local/bin', '/usr/local/sbin', '/usr/sbin', '$HOME/.cargo/bin', '$HOME/.local/bin', '$HOME/go/bin', '$HOME/opt/doom-emacsdir/bin']
    prompt_command = ['~/.functions', '~/.aliases']
    shellcheck_disable = ['1091', '2034']
    DUBLE_QUOTE = '''"'''


if __name__ == '__main__':
    main()
