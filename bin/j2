#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
TODO PYTHONSTARTUP in global environment
TODO act like wrapper for j2 when not called by yadm
~/.sway/config##template.j2,class.unstable
-o
~/.sway/config.343865.28874
"""

from box import Box
from collections import defaultdict
from jinja2 import Environment, Template, ChoiceLoader, DictLoader, FileSystemLoader
from jinja2.exceptions import UndefinedError
from loguru import logger
from pathlib import Path
from subprocess import run, Popen, PIPE, DEVNULL
import importlib.util
import os
import psutil
import sys
import tempfile
import ansi
import re
from j2cli import main as j2_main


try:
    from docopt import docopt   # FIXME
except Exception:
    pass


def main():
    parent = psutil.Process(os.getppid()).name()

    logger.debug((sys.stdin.isatty()))

    if parent in ['yadm']:
        sys.argv[0] = re.sub(r'(-script\.pyw|\.exe)?$', '', sys.argv[0])
        exit(j2_main())
    if parent in ['emacs', 'bash']:
        override()
    elif 'python' in parent:
        logger.info("Kill loop")
    else:
        passthrough()

    exit(0)


@logger.catch
def passthrough():
    """TODO."""
    logger.info("passthrough")
    if os.getenv('PASSTHROUGH', False):
        return

    logger.info(sys.argv)

    with Popen([] + sys.argv[:1], stdin=sys.stdin, stderr=sys.stderr, stdout=sys.stdout, env=dict(PASSTHROUGH="yes")) as p:
        res = p.communicate()
        logger.debug(res)

    # os.system(' '.join(sys.argv))


@logger.catch
def override():

    # allow overriding data loader
    loader = vars().get(os.getenv('LOADER', 'default_loader'), default_loader)

    data = loader()
    template_path = 1
    template_output_path = 3

    logger.info('Starting render')

    with (
        Path(sys.argv[template_output_path]).expanduser().open('w+')
        if sys.argv[1:] else
        tempfile.NamedTemporaryFile('w+')
    ) as fd:
        template = (
            sys.argv[template_path]
            if sys.argv[1:] else
            '~/.zshrc##template.j2'
        )
        txt = render(template, data)
        fd.write(txt)

    logger.info('Render complete')


@logger.catch
def render(template_path, data):
    template_load_path = '''{HOME}/.config/yadm'''.format(**os.environ)
    environment = Environment(
        loader=ChoiceLoader([
            FileSystemLoader(template_load_path)
        ])
    )

    head = (Path(template_load_path) / 'macro.j2').read_text()
    body = Path(template_path).expanduser().read_text()
    tail = ""                   # TODO
    template_content = head + body + tail
    jinja_template = environment.from_string(template_content)

    txt = jinja_template.render(data)

    return txt


def default_loader():
    template_load_path = '''{HOME}/.config/yadm'''.format(**os.environ)
    data_cmd = '''{HOME}/.config/yadm/helpers/parse-gitconfig'''.format(**os.environ)
    default_camelkiller_boxdots = dict(default_box=True, camel_killer_box=True, box_dots=True)
    camelkiller_boxdots = dict(default_box=False, camel_killer_box=True, box_dots=True)
    boxdots = dict(default_box=False, camel_killer_box=True, box_dots=False)

    box = Box(**boxdots)

    res = (
        run(data_cmd.split(), shell=False, capture_output=True)
        .stdout
        .decode()
    )

    data = box.from_json(res)

    try:
        logger.debug(data.meta.rootvar)
    except Exception as e:
        logger.warning(e)

    data.update(os.environ)
    data = data.to_dict()
    data.update(Vars.__dict__)

    return data


def native_load():
    data_cmd = '''{HOME}/.config/yadm/helpers/parse-gitconfig'''.format(**os.environ)
    module_path = '{HOME}/.config/yadm/src/site-packages/betterdict/betterdict/betterdict.py'.format(**os.environ)
    spec = importlib.util.spec_from_file_location("betterdict.BetterDict", module_path)
    _mod = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(_mod)

    res = (
        run(data_cmd.split(), shell=False, capture_output=True)
        .stdout
        .decode()
    )

    data = _mod.BetterDict()
    data.from_command(data_cmd)
    data.update(os.environ)

    data = data.to_dict()
    data.update(Vars.__dict__)

    return data


class Vars(object):
    COMMA = ','
    EQUAL = '='
    PERCENT = '%'
    HYPHEN = '-'
    EXCLAMATION_MARK = '!'
    PLUSS = '+'
    QUOTE = "'"
    SPACE = ' '
    NEWLINE = '\n'
    TAB = '\t'
    LEFT_PARENTHESIS = '('
    RIGHT_PARENTHESIS = ')'
    PARENTHESIS = dict(left=LEFT_PARENTHESIS, right=RIGHT_PARENTHESIS)
    LEFT_CURLYBRACKET = '{'
    RIGHT_CURLYBRACKET = '}'
    CURLYBRACKET = dict(left=LEFT_CURLYBRACKET, right=RIGHT_CURLYBRACKET)
    LEFT_BRACKET = '['
    RIGHT_BRACKET = ']'
    BRACKET = dict(left=LEFT_BRACKET, right=RIGHT_BRACKET)
    DELIMITER = {RIGHT_PARENTHESIS:LEFT_PARENTHESIS, LEFT_PARENTHESIS: RIGHT_PARENTHESIS, RIGHT_CURLYBRACKET:LEFT_CURLYBRACKET, LEFT_CURLYBRACKET: RIGHT_CURLYBRACKET, RIGHT_BRACKET:LEFT_BRACKET, LEFT_BRACKET: RIGHT_BRACKET}
    DELIMITER_BEGINNING = {RIGHT_PARENTHESIS:LEFT_PARENTHESIS, LEFT_PARENTHESIS: LEFT_PARENTHESIS, RIGHT_CURLYBRACKET:LEFT_CURLYBRACKET, LEFT_CURLYBRACKET: RIGHT_CURLYBRACKET, RIGHT_BRACKET:LEFT_BRACKET, LEFT_BRACKET: LEFT_BRACKET}
    DELIMITER_END = {RIGHT_PARENTHESIS:RIGHT_PARENTHESIS, LEFT_PARENTHESIS: RIGHT_PARENTHESIS, RIGHT_CURLYBRACKET:LEFT_CURLYBRACKET, LEFT_CURLYBRACKET: RIGHT_CURLYBRACKET, RIGHT_BRACKET:RIGHT_BRACKET, RIGHT_BRACKET: RIGHT_BRACKET}
    doom_emacs_packages = ['rainbow-delimiters', 'systemd-mode', 'mmm-mode', 'sway', 'ob-tmux']
    zsh_env = dict(ZSH='$HOME/.oh-my-zsh', ZSH_THEME='simple')
    zsh_plugins = ['zsh-autosuggestions', 'direnv', 'fzf', 'tmux']
    static_dirs = dict(yadm='${HOME}/.config/yadm', run='${XDG_RUNTIME_DIR:-/run/user/${EUID:-$(id -u)}}', config='${XDG_CONFIG_HOME:-${HOME}/.config}', fonts='${HOME}/.local/share/fonts', autorun='${HOME}/.config/autorun', desktop='${HOME}/.local/share/applications', apps='${HOME}/.local/share/applications', zsh='$ZSH')
    path = ['$HOME/bin', '$HOME/.pyenv/bin', '/usr/bin', '/usr/local/bin', '/usr/local/sbin', '/usr/sbin', '$HOME/.cargo/bin', '$HOME/.local/bin', '$HOME/go/bin', '$HOME/opt/doom-emacsdir/bin']
    prompt_command = ['~/.functions', '~/.aliases']
    shellcheck_disable = ['1091', '2034']
    DUBLE_QUOTE = '''"'''


if __name__ == '__main__':
    main()
