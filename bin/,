#!/usr/bin/env bash
# -*- mode: sh[bash] -*-
# shellcheck disable=2092,2096
shopt -s extglob



# TODO FILE in `yadm ls` ? yadm add FILE : cat /dev/null
# TODO ','s

export PATH=${PATH:-${HOME}/bin:${PATH}}
export DBUS_SESSION_BUS_ADDRESS=${DBUS_SESSION_BUS_ADDRESS:-unix:path=/run/user/${EUID}/bus}
export WAYLAND_DISPLAY=${WAYLAND_DISPLAY:-wayland-1}

declare -x tmp
declare -a -x args

args=("$@")
tmp="$(mktemp)"
script="$(which "$0"|xargs realpath)"
realname=$(readlink "$name")
parent=$(readlink /proc/$PPID/exe)
functions=( "$(compgen -A function)" )
notify_send_msg_title='comma'
notify_send_msg_timeout=3000

# auto-alt enabled
read -r yadm_auto_alt < <(yadm config yadm.auto-alt |
                              sed s,0,false,\;s,1,true,)

test -s ~/.functions && source ~/.functions

trap 'TRAPEXIT' EXIT
# trap 'TRAPERR' ERR

function __start__ {
    __main__
}

TRAPEXIT() {
    cleanup
}

TRAPERR() { # TODO
    exit 1
}

cleanup() {
    rm -v "$tmp"
}

function msg {
    command env notify-send --expire-time "${notify_send_msg_timeout:-5000}" "${notify_send_msg_title}" "${BASH_FUNCNAME[*]:-${FUNCNAME[*]}}:$*"
}

function __main__ {

    cat /proc/$$/cmdline

    # ',' script is symlinked
    if [[ $(realpath "$0" | sed 's|.*/||') != ${0##*/} ]]; then
        __${0##*/}
    fi

    # filter files
    mapfile files < <(filterFiles)

    for file
    do _file_handler "$file"
    done
}

function _get_args {
    printf '%s ' "$@"
}

function ___test_args {
    printf '%s ' "$@"
}

function _yadm_helper {
    :
}

function parent {
    readlink /proc/$PPID/exe
}

function filterFiles {
    for arg
    do test -s "$arg" || continue
       echo -en "$arg"
    done
}

_yadm_alias_handler() {
    # [[ $* =~  ]] || exit 1
    msg "$@"
    command yadm add --force "$*"
}


_install_fonts() {
    command install --compare --verbose -D -- ~/.local/share/fonts "$@"
}


function isGit {
    git rev-parse --show-toplevel &>/dev/null
}


function runPlay {
    # export ANSIBLE_HOME=$HOME/ansible
    export ANSIBLE_STDOUT_CALLBACK=yaml
    export ANSIBLE_FORCE_COLOR=1
    export ANSIBLE_DEBUG=0
    export ANSIBLE_VERBOSITY=0
    # export ANSIBLE_
    # export ANSIBLE_INVENTORY=inventory/
    # export ANSIBLE_INVENTORY_PLUGIN_SCRIPT_STDERR=true
    # export ANSIBLE_CONFIG=ffs.cfg

    gitdir="${1%/*}"
    pushd "$gitdir"

    if pushd "$(git rev-parse --show-toplevel)"; then
        if test 1 -eq  "$(yq '..|select(has(\"become\")).become' "$1")"; then
            pass _ansible/become | tee fifo > /dev/null &
            export ANSIBLE_PASSWORD_FILE=fifo
        fi
        ansible-playbook $(realpath --relative-base="$_" "$1")
        return
        # echo pwd: $PWD
    else
        ansible-playbook "$1"
    fi
}


yadmHandler() {
    :<<__YADM_HELP__
    YADM_HOOK_COMMAND      # The command which triggered the hook
    YADM_HOOK_EXIT         # The exit status of the yadm command
    YADM_HOOK_FULL_COMMAND # The yadm command with all command line arguments
    YADM_HOOK_REPO         # The path to the yadm repository
    YADM_HOOK_WORK         # The path to the work-tree
__YADM_HELP__

}

function _file_handler {
    set -x
    [[ $@ ]] || return 1
    file="$1"
    # shebang=$(sed -E '1'  "$file")
    ext=${1##*.}
    name=${0##*/}


    case "$script" in
        script)

            return
            ;;
        *)
    esac

    case "$file" in
        */Makefile)
            env -C "${file%/*}" emacsclient  --no-wait --eval '(let ((compile-command "make")) (compile compile-command))'
            return
            ;;
        *)
    esac


    case "$file" in
        *\#\#*template*j2*)
            template="$file"
            unset file
            yadm add --force "$template"

            if ! $yadm_auto_alt; then
                "${HOME}"/bin/j2 \
                    -f json      \
                    -o "$tmp"    \
                    "$template"

            fi

            return $?
            ;;
        *)
    esac

    case $ext in
        otf|ttf)
            _install_fonts "$file"
            ;;
        j2)
            template="$file"
            dest="${dest:-${template%.${ext}}}"
            unset file

            "${HOME}"/bin/j2 \
                -f json      \
                -o "$tmp"    \
                "$template"  \

            # if ! j2 -e HOME="$HOME" -o "$tmp" "$template" <(sed '/^{#[ \t]\(.*\)[ \t]#}/!d;s||\1|' "$template" || "$HOME"/.config/yadm/helpers/parse-gitconfig)
            # then
            # fi

            case $dest in
                *sway*)
                    sway --validate --check "$tmp"
                    return 1
                    ;;
                *)
            esac

            if ! grep --silent -P '\S' "$tmp"; then
                exit $?
            fi

            printf '<<<<<<<<<< %s >>>>>>>>>>' 'START'
            uniq "$tmp" | highlight -O ansi --force
            printf '<<<<<<<<<< %s >>>>>>>>>>' 'END'

            # cat --show-all "$tmp"
            install --verbose -DT -- "$tmp" "$dest"
            ;;
        *)
    esac

    return
    # FIXME
    # yadm aliases
    if [[ $* =~ \#{2} ]]; then
        _yadm_alias_handler "${BASH_ARGV[@]}"
        return
    fi
}

function _after_template_render_hook {
    [[ $@ ]] || return 1
    template="$1"
    output="$2"
    output_ext="${output##*.}"
    template_ext="${template##*.}"
    case $output_ext in
        j2)
            ;;
        *)
    esac
}

__start__

# if [[ $DEBUG ]]; then
#     command notify-send --expire-time $notify_send_msg_timeout ${@:-,}
# fi
