#!/usr/bin/env python

"""
TODO.
"""

import asyncio
import os
import sys
from subprocess import run, Popen, PIPE, DEVNULL
from pathlib import Path
from loguru import logger


d = logger.debug
e = logger.error
i = logger.info


class Print(object):

    def __lshift__(self, right):
        sys.stdout.write(right)

    def __rshift__(self, right):
        sys.stdout.write(right)

    # def __iter__(self):
    #     sys.stderr.write('iter' + '\n')
    #     return iter(self, [1,2,3])

    def __or__(self, right):
        # sys.stderr.write(right + '\n')
        return [_ for _ in self if right]

    def __gt__(self, right):
        sys.stdout.write(right + '\n')

    def __lt__(self, right):
        sys.stdout.write(right + '\n')



async def main():
    args = sys.argv[1:]
    paths = map(Path, args)
    files = filter(Path.exists, paths)
    shell_script = filter(lambda x: str(x).endswith('.sh'), files)

    for p in shell_script:
        ret = sh(p.__str__())
        async for _ in ret:
            print(_)
        break


async def sh(cmd):
    process = await asyncio.create_subprocess_exec('/bin/bash', *cmd.split())
    try:
        yield process.stdout.readline()
    except AttributeError:
        pass



async def override():
    def _inner(func):
        def _wrapper(*args, **kwargs):
            ret = func(*args, **kwargs)
            return ret
        return _inner
    return _inner


if __name__ == '__main__':
    asyncio.run(main())
