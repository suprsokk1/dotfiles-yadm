#!/usr/bin/bash -a
trap 'TRAPEXIT $LINENO' EXIT
trap 'TRAPERR  $LINENO' ERR     # TODO

function TRAPERR {
    [[ $DEBUG ]] && echo "$@" >&2
    # exit 2
}


function TRAPEXIT {
    return                      # FIXME
    case $? in
        0) echo EXIT ;;
        *) echo "error:${0}:$@:"
    esac >&2
}


function NOTIFY {
    [[ $DEBUG ]] || exit 0
    local override

    if ! [[ $* =~ --\ (.*) ]]; then
        notify-send --expire-time=${EXPIRE_TIME:-1000} "$0" "$@"
    else
        notify-send "${BASH_REMATCH[1]}" "$@"
    fi

    return 0
}


function command_not_found_handle {
    # echo TODO ${FUNCNAME} "$@" >&2
#     _notify "$0" <<< "${FUNCNAME} $*"
:
    # exit 127
}


if [[ $1 =~ debug ]]; then
    ~/bin/yadm config debug.enable | {
        read debug; ((debug))
        ~/bin/yadm config debug.enable $?
    }
    echo -en 'debug = '
    ~/bin/yadm config debug.enable
    exit 0
fi >&2

# set -x

# if [ $1 = debug ]; then
#     ~/bin/yadm config --bool debug.enable | {
#         read debug; ! $debug
#         ~/bin/yadm config --bool debug.enable $?
#     }

#     # print updated status
#     echo -en 'debug = '
#     ~/bin/yadm config debug.enable

#     exit 0
# fi >&2

~/bin/yadm config debug.enable |
    {
        read -r DEBUG
        if $DEBUG; then
            export DEBUG
        else
            unset DEBUG
        fi
    }

read -r EXPIRE_TIME < <(~/bin/yadm config notify-send.expire-time)

PS4='\r$0:${LINENO}: ${FUNCNAME:+$FUNCNAME()}:${SCRIPT[@]:$((LINENO))}:$(printf "\n")\n'
PS4='\r$0:${LINENO}: ${FUNCNAME:+$FUNCNAME()}:${SCRIPT[@]:$((LINENO-4)):8}:$(printf "\n")\n'
IFS=$'\n' read -a SCRIPT < "$0"

# xtrace
eval "${DEBUG:+set -o xtrace}"

# get parent process information
read -r PARENT_PID PARENT_BASENAME PARENT_VERSION PARENT_BASE PARENT_REST < <(parent $$)
read -r GRANDPARENT_PID GRANDPARENT_BASENAME GRANDPARENT_VERSION GRANDPARENT_BASE GRANDPARENT_REST < <(parent $PARENT_PID)

# NOTIFY "parent:\n $PARENT_PID $PARENT_BASENAME $PARENT_VERSION $PARENT_BASE $REST grandparent:\n\n$GRANDPARENT_PID\n$GRANDPARENT_BASENAME\n$GRANDPARENT_VERSION\n$GRANDPARENT_BASE\n$GRANDPARENT_REST"

env > ${XDG_RUNTIME_DIR:-/run/user/$UID}/_comma-env-"$PARENT_BASENAME".txt # DEBUG
set > ${XDG_RUNTIME_DIR:-/run/user/$UID}/_comma-set-"$PARENT_BASENAME".txt # DEBUG

# ~/bin/yadm controlled dotfiles
mapfile YADM_ALL < <(~/bin/yadm ls-files)

# current branch
read -r YADM_BRANCH < <(~/bin/yadm branch|awk '/\*/{print $NF}')

# prepare environment
XDG_RUNTIME_DIR=${XDG_RUNTIME_DIR:-/run/user/$UID}
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/$UID/bus
SWAYSOCK=$(echo /run/user/1001/sway-ipc.$UID.[1-9]*[0-9].sock)
# read -r SWAYSOCK < <(echo /run/user/1001/sway-ipc.$UID.[1-9]*[0-9].sock) # FIXME


###
### START
###

# if [[ $(pgrep --exact --oldest -- vector 2>/dev/null) =~ [1-9][0-9] ]]; then
#    exec <>3 /proc/${BASH_REMATCH}/fd/0
# fi

# printf '%q\n' "$@" >&2
# printf '%q\n' "$@" >&[3]

case ${PARENT_BASENAME:-$1} in
    waybar)
        # [[ $DEBUG ]] && command notify-send "WAYBAR"
        # NOTIFY WAYBAR
        class=${3:-good}
        read root_shells < <(pgrep bash --count --uid 0 --exact)
        set bad good
        ((root_shells))
        class=${!?}
        text=""

        case $2 in
            json)
                jo -d. text="$text" tooltip="baz" class="$class" percentage=0
                ;;
            text)
                dir -1 ~/ | wc -l
                ;;
            *)
        esac

        exit

        ;;
    python*)
    # TODO qutebrowser
    ;;
    *)
esac

# TODO magic dirs with incron

# to avoid loops
PATH=~/.pyenv/bin:/usr/bin:/usr/local/bin:/usr/local/sbin:/usr/sbin:~/.cargo/bin:~/.local/bin:~/go/bin
export PATH


# handle symlinks pointing to ~/bin/,
case ${0##*/} in
    jump|jumpapp)
        i3='i3-msg'
        sway3='swaysock'

        if ! pgrep "$1" >/dev/null ; then
            # sway/i3
            ${!DESKTOP_SESSION} exec "${@:100}"
        fi
        ;;
    j2)

        # TODO j2cli can parse env as list/dict?
        case $PARENT_BASENAME in
            ~/bin/yadm)
                command env j2 "$@"
            ;;
            *)
                command env j2 "$@"
        esac

        exit
    ;;

    rofi)
        # NOTIFY "${0##*/}"\
        # "rofi: $@"
        # command notify-send --expire-time=10000 "${0##*/}"  "$@"
        # env DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1001/bus /usr/bin/notify-send --expire-time=10000 "rofi: $@"

        script="$HOME"/.local/bin/_poc_rofi_mode_script
        export WAYLAND_DISPLAY=wayland-1
        # command env - /usr/bin/rofi -show poc -modi drun,window,ssh,poc:${script}

        # /usr/bin/rofi -show drun -modi drun,window,ssh # works -- Sat Dec 16 04:30:13 PM CET 2023
        /usr/bin/rofi -show poc -modi drun,window,ssh,poc:"$script"

        # eval "env WAYLAND_DISPLAY=wayland-1 /usr/bin/rofi -show drun -modi drun,window,ssh"

        exit
        # ORIG: WORKS!
        # eval "env WAYLAND_DISPLAY=wayland-1 /usr/bin/rofi $@"
        ;;

    askpass)
        case $PARENT_BASENAME in
            ssh) ;;             # TODO
            sudo)
                NOTIFY ASKPASS >&2
                # command notify-send --expire-time=10000 SUDO >&2
                # env PASSWORD_STORE=$HOME/.password-store /usr/bin/pass local
                /usr/bin/pass local
                # NOTIFY END >&2

                exit
                ;;
            *)
        esac
        ;;

    envx)
        [[ $DEBUG ]] && echo $0 >&2
        command env - xargs -0rn1 -a /proc/$PARENT_PID/environ
        exit
        ;;
    *)

esac

exec _handle_parent_${PARENT_BASENAME} "$@" |
    if [[ $DEBUG ]]; then
        tee /dev/stderr | logger -t ','
    fi &>/dev/null

NOTIFY "${@:+args:$@}${PARENT_BASENAME:+parent: ${PARENT_BASENAME}}" # debug

exit 0

for arg; do # FIXME
    ~/bin/yadm status --porcelain=v1 "$arg" &>/dev/null || continue
    [ "$YADM_BRANCH" = unstable ] || continue
    ~/bin/yadm add "$arg"
    echo TODO ~/bin/yadm commit -m "Autocommit by ','"
done >&2
