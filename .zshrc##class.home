# .zshrc -*- mode: sh -*-

# NOTE ðŸ’¡alias/override command options; f.ex. alias grep.only-matching='func or command' override grep --only-matching
# FIXME tmux pane format: show relevant git info.; branch, dirty status etc
# TODO tmux completion
# TODO disable bell
# TODO disable all predefined static dirs
# TODO move customizations to $ZSH/custom/; ~$ZSH/custom/<modname>/<modname>.module.zsh~

# zmodload zsh/regex
zmodload zsh/pcre

case $(xdg-settings get default-web-browser) in
  *qute*);;
  *) xdg-settings set default-web-browser /usr/share/applications/org.qutebrowser.qutebrowser.desktop
esac

# force tmux to truncate lines
setterm --linewrap off

hash -d yadm=$HOME/.config/yadm
hash -d run="${XDG_RUNTIME_DIR:-/run/user/${EUID:-$(id -u)}}"
hash -d config="${XDG_CONFIG_HOME:-$HOME/.config}"
hash -d ram=$HOMErun
hash -d temp=$HOMErun
hash -d fonts=$HOME/.local/share/fonts
hash -d autorun=$HOME/.config/autorun
hash -d desktop=$HOME/.local/share/applications


ZSH=~/.oh-my-zsh
ZSH_THEME=${ZSH_THEME:-simple}
if [[ $TMUX ]]; then
plugins+=( git )
fi
# plugins-=( pipenv )
plugins+=( zsh-autosuggestions )
plugins+=( direnv )
plugins+=( fzf )
plugins+=( tmux )

# plugins+=(h) # breaks zsh-autosuggestions?

FZF_DEFAULT_OPTS="--layout=reverse --height=7"
FZF_DEFAULT_COMMAND=$HOME/bin/,

# PROMPT_COMMAND+="`# TODO`_refresh_completion &>/dev/null"
# FIXME show relevant git info.; branch, dirty status etc.
prompt_command=()
prompt_command+=( '. ~/.functions' )
prompt_command+=( '. ~/.aliases' )
# prompt_command+=( "tmux set @pane-title '#[fg=colour10]'" )
prompt_command+=( "tmux set @pane-title '#[fg=colour10]'" )
# prompt_command+=( 'tmux set @pane-title $(pwd; git rev-parse --show-toplevel 2>/dev/null)' )
# prompt_command+=( 'if [[ $? -eq 0 ]]; then tmux set @pane-format "#[fg=colour10]#{@pane-title}" ; else tmux set @pane-format "#[fg=colour10]#{@pane-title}"; fi' )
# prompt_command+=( 'if test -s /home/linuxbrew/.linuxbrew/bin/go; then hash go=/home/linuxbrew/.linuxbrew/bin/go; fi' )

PROMPT_COMMAND=
for x in $prompt_command; do
  PROMPT_COMMAND+="; $x"
done

if ! test -d ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
then git clone https://github.com/zsh-users/zsh-autosuggestions $_
fi

for ITEM in aliases functions parameters; do
    function -list--$ITEM {
        eval "print -rl -- \${(k)${funcstack##*-}}"
    }
done

# activate oh-my-zsh
if [[ -s $ZSH/oh-my-zsh.sh ]]; then
. $ZSH/oh-my-zsh.sh
fi

# detect tmux popup window
if [[ $TMUX ]]; then
  if [[ $TMUX_PANE ]]; then

    ## normal pane

    # when active tmux will display
    PROMPT="${PROMPT//git_prompt_info/true}"

  else

    ## popup

    if false; then
      tmux source-file ~/.config/tmux/tmux.conf
      __tmux_menu # TODO
    fi
  fi
fi

# set -x
if command -v crontab &>/dev/null
then : <<.syntax; { envsubst | crontab - &>/dev/null; } <<'CRONTAB'
# m h w m y
  * * * * * commandline
.syntax

PATH=${HOME}/bin:${PATH}
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/${EUID}/bus
WAYLAND_DISPLAY=${WAYLAND_DISPLAY}

*/5 * * * *
CRONTAB
fi

:<<.syntax; if command -v incrontab &>/dev/null; then { envsubst|incrontab - &>/dev/null; } <<'INCRONTAB'; fi
$$   dollar sign
$@   watched filesystem path (see above)
$#   event-related file name
$%   event flags (textually)
$&   event flags (numerically)
.syntax
$HOME/watch IN_CREATE,recursive=false /usr/bin/notify-send --expire-time 1000 foo bar
INCRONTAB

incrontab -l | awk '{system("chmod a+x "$1)}'

# ~/watch IN_ALL_EVENTS,recursive=false /usr/bin/notify-send --expire-time 1000 foo bar
# DEBUG=1
# PATH=${HOME}/bin:${PATH}
# DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/${EUID}/bus
# WAYLAND_DISPLAY=${WAYLAND_DISPLAY}
# ${HOME}/.local/share/fonts/   IN_ALL_EVENTS,recursive=false    , $%,"$@/$#"
# ${HOME}/Downloads/            IN_ALL_EVENTS,recursive=false    , $%,"$@/$#"
# ${HOME}/git/org/roam/         IN_CREATE,recursive=false        env -C ${HOME}/git/org gh repo sync
# ${HOME}/watch/                IN_ALL_EVENTS,recursive=false    /usr/bin/notify-send --expire-time 5000 $# $%



if false; then
source <(when jc --zsh-comp)
fi

# this must be the last file to load
set - zsh-syntax-highlighting
if [[ -s ~/src/"$1"/"$1".zsh ]]; then
source ~/src/"$1"/"$1".zsh
fi; shift

#
## completion
##
## DOC: https://thevaluable.dev/zsh-completion-guide-examples/

_vpn() {
    reply=( on off up down 0 1 )
}
compctl -K {_,}vpn

:<<COMPLETION_EXAMPLES
$ zstyle :completion:<function>:<completer>:<command>:<argument>:<tag>
COMPLETION_EXAMPLES

zsh_cache_dir="${XDG_CACHE_HOME:-/run/user/${EUID:-$(id -u)}}/zsh/.zcompcache"
zstyle ':completion:*' cache-path "$zsh_cache_dir"
zstyle ':completion:*' use-cache on
zstyle ':completion:*' squeeze-slashes true

# select | select=long | select=<n>
zstyle ':completion:*' menu select
zstyle ':completion:*:*:*:*:corrections' format '%F{yellow}!- %d (errors: %e) -!%f'

zstyle ':completion:*' completer _extensions _complete _approximate
zstyle ':completion:*:*:cp:*' completer _extensions _complete _approximate
zstyle ':completion:*:*:vpn:*' completer _vpn
zstyle ':completion:*:*:wifi:*' completer _complete


#
## Emacs default 'M-l'
##

bindkey "^[l" down-case-word

#
## Insert last commands output
## https://github.com/rothgar/mastering-zsh/blob/master/docs/helpers/widgets.md
##
zmodload -i zsh/parameter

insert-last-command-output() {
  LBUFFER+="$(eval $history[$((HISTCMD-1))])"
}
zle -N insert-last-command-output
bindkey "^Q^L" insert-last-command-output


#
## TODO replace word at point
##

fzf-replace-word() {
  fzf --preview "echo $words[-1]"
}
zle -N fzf-replace-word


#
## Clipboard
##

paste-clipboard-wayland() {
  LBUFFER+="$(eval wl-paste)"
}

paste-clipboard-x() {
  LBUFFER+="$(eval xclip -out -selection clipboard)"
}

paste-clipboard() {
   if [[ $WAYLAND_DISPLAY ]]; then
      LBUFFER+="$(eval wl-paste)"
   else
      LBUFFER+="$(eval xclip -out -selection clipboard)"
   fi
}

# zle -N paste-clipboard-wayland
# zle -N paste-clipboard-x
zle -N paste-clipboard

# if [[ $WAYLAND_DISPLAY ]]; then
# bindkey "^[y" paste-clipboard-wayland
# else
# bindkey "^[y" paste-clipboard-x
# fi

bindkey "^[y" paste-clipboard

# FIXME show relevant git info.; branch, dirty status etc

#
## FIXME Pretty print JSON
##

pretty-print-json() {
  LBUFFER="$(eval jq <<< \"$json\")"
}
zle -N pretty-print-json
bindkey "^Q^J" pretty-print-json

foo() {
  case ${#LBUFFER} in
    0) tmux display-message "Nothing to do.." ;;
    *) tmux split -H "cat"
  esac
}
zle -N foo
bindkey "^[i" foo


#
## FIXME In case homebrew break Python deps
##

if false; then
old_path="$PATH"
path=( ${(m)path:#*brew*} )
export PATH
fi

if test -d ~/.sh.d; then
for adhoc in ~/.sh.d/*.zsh; do
    shellcheck "$adhoc" &>/dev/null || continue
    . "$adhoc"
done
fi


#
## ls / exa
##

yadm_regex() {
  yadm config --get-regex ^regex |
    cut -d. -f 2- |
    sed -E 's#^([[:print:]]+)[[:space:]](.*)#(?P<\1>\2)#' |
    tr -d '\n' |
    xargs -0 |
    tr '\0' '|'

}
